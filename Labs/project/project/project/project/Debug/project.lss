
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000252  00800100  00001128  000011bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001128  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800352  00800352  0000140e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000140e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dca  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c79  00000000  00000000  000033ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010b5  00000000  00000000  00004043  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  000050f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070e  00000000  00000000  000054bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001177  00000000  00000000  00005bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006d41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__vector_18>
      4c:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e2       	ldi	r30, 0x28	; 40
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 35       	cpi	r26, 0x52	; 82
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a2 e5       	ldi	r26, 0x52	; 82
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 3a       	cpi	r26, 0xA2	; 162
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <main>
      9e:	0c 94 92 08 	jmp	0x1124	; 0x1124 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <output_init>:


void output_init(void)
{
    //setting pins to output
    GPIO_config_output(&DDRD, BIT7);
      a6:	63 e0       	ldi	r22, 0x03	; 3
      a8:	8a e2       	ldi	r24, 0x2A	; 42
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	0e 94 12 01 	call	0x224	; 0x224 <GPIO_config_output>
    GPIO_config_output(&DDRD, BIT6);
      b0:	62 e0       	ldi	r22, 0x02	; 2
      b2:	8a e2       	ldi	r24, 0x2A	; 42
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 12 01 	call	0x224	; 0x224 <GPIO_config_output>
    GPIO_config_output(&DDRC, BIT5);
      ba:	65 e0       	ldi	r22, 0x05	; 5
      bc:	87 e2       	ldi	r24, 0x27	; 39
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 12 01 	call	0x224	; 0x224 <GPIO_config_output>
    GPIO_config_output(&DDRC, BIT4);
      c4:	64 e0       	ldi	r22, 0x04	; 4
      c6:	87 e2       	ldi	r24, 0x27	; 39
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	0e 94 12 01 	call	0x224	; 0x224 <GPIO_config_output>
    GPIO_config_output(&DDRB, BIT3);
      ce:	65 e0       	ldi	r22, 0x05	; 5
      d0:	84 e2       	ldi	r24, 0x24	; 36
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	0e 94 12 01 	call	0x224	; 0x224 <GPIO_config_output>
    GPIO_config_output(&DDRB, BIT2);
      d8:	64 e0       	ldi	r22, 0x04	; 4
      da:	84 e2       	ldi	r24, 0x24	; 36
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	0e 94 12 01 	call	0x224	; 0x224 <GPIO_config_output>
    GPIO_config_output(&DDRB, BIT1);
      e2:	63 e0       	ldi	r22, 0x03	; 3
      e4:	84 e2       	ldi	r24, 0x24	; 36
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 94 12 01 	call	0x224	; 0x224 <GPIO_config_output>
    GPIO_config_output(&DDRB, BIT0);    
      ec:	62 e0       	ldi	r22, 0x02	; 2
      ee:	84 e2       	ldi	r24, 0x24	; 36
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0e 94 12 01 	call	0x224	; 0x224 <GPIO_config_output>
      f6:	08 95       	ret

000000f8 <output_bitstream>:
}

void output_bitstream(uint8_t bitstream)
{
      f8:	cf 93       	push	r28
      fa:	c8 2f       	mov	r28, r24
    //setting pins to bitsream value
    if ((bitstream >> 0) & 1)   // checking BIT0 - B2
      fc:	80 ff       	sbrs	r24, 0
      fe:	06 c0       	rjmp	.+12     	; 0x10c <output_bitstream+0x14>
    {
        GPIO_write_high(&PORTB, BIT0);
     100:	62 e0       	ldi	r22, 0x02	; 2
     102:	85 e2       	ldi	r24, 0x25	; 37
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 2b 01 	call	0x256	; 0x256 <GPIO_write_high>
     10a:	05 c0       	rjmp	.+10     	; 0x116 <output_bitstream+0x1e>
    } 
    else
    {
        GPIO_write_low(&PORTB, BIT0);
     10c:	62 e0       	ldi	r22, 0x02	; 2
     10e:	85 e2       	ldi	r24, 0x25	; 37
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 1e 01 	call	0x23c	; 0x23c <GPIO_write_low>
    }
    
    if ((bitstream >> 1) & 1)   // checking BIT1 - B3
     116:	c1 ff       	sbrs	r28, 1
     118:	06 c0       	rjmp	.+12     	; 0x126 <output_bitstream+0x2e>
    {
        GPIO_write_high(&PORTB, BIT1);
     11a:	63 e0       	ldi	r22, 0x03	; 3
     11c:	85 e2       	ldi	r24, 0x25	; 37
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	0e 94 2b 01 	call	0x256	; 0x256 <GPIO_write_high>
     124:	05 c0       	rjmp	.+10     	; 0x130 <output_bitstream+0x38>
    }
    else
    {
        GPIO_write_low(&PORTB, BIT1);
     126:	63 e0       	ldi	r22, 0x03	; 3
     128:	85 e2       	ldi	r24, 0x25	; 37
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 1e 01 	call	0x23c	; 0x23c <GPIO_write_low>
    }
    
    if ((bitstream >> 2) & 1)   // checking BIT2 - B4
     130:	c2 ff       	sbrs	r28, 2
     132:	06 c0       	rjmp	.+12     	; 0x140 <output_bitstream+0x48>
    {
        GPIO_write_high(&PORTB, BIT2);
     134:	64 e0       	ldi	r22, 0x04	; 4
     136:	85 e2       	ldi	r24, 0x25	; 37
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 2b 01 	call	0x256	; 0x256 <GPIO_write_high>
     13e:	05 c0       	rjmp	.+10     	; 0x14a <output_bitstream+0x52>
    }
    else
    {
        GPIO_write_low(&PORTB, BIT2);
     140:	64 e0       	ldi	r22, 0x04	; 4
     142:	85 e2       	ldi	r24, 0x25	; 37
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 1e 01 	call	0x23c	; 0x23c <GPIO_write_low>
    }
    
    if ((bitstream >> 3) & 1)   // checking BIT3 - B5
     14a:	c3 ff       	sbrs	r28, 3
     14c:	06 c0       	rjmp	.+12     	; 0x15a <output_bitstream+0x62>
    {
        GPIO_write_high(&PORTB, BIT3);
     14e:	65 e0       	ldi	r22, 0x05	; 5
     150:	85 e2       	ldi	r24, 0x25	; 37
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 2b 01 	call	0x256	; 0x256 <GPIO_write_high>
     158:	05 c0       	rjmp	.+10     	; 0x164 <output_bitstream+0x6c>
    }
    else
    {
        GPIO_write_low(&PORTB, BIT3);
     15a:	65 e0       	ldi	r22, 0x05	; 5
     15c:	85 e2       	ldi	r24, 0x25	; 37
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 1e 01 	call	0x23c	; 0x23c <GPIO_write_low>
    }
        
    if ((bitstream >> 4) & 1)   // checking BIT4 - C4
     164:	c4 ff       	sbrs	r28, 4
     166:	06 c0       	rjmp	.+12     	; 0x174 <output_bitstream+0x7c>
    {
        GPIO_write_high(&PORTC, BIT4);
     168:	64 e0       	ldi	r22, 0x04	; 4
     16a:	88 e2       	ldi	r24, 0x28	; 40
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 2b 01 	call	0x256	; 0x256 <GPIO_write_high>
     172:	05 c0       	rjmp	.+10     	; 0x17e <output_bitstream+0x86>
    }
    else
    {
        GPIO_write_low(&PORTC, BIT4);
     174:	64 e0       	ldi	r22, 0x04	; 4
     176:	88 e2       	ldi	r24, 0x28	; 40
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 1e 01 	call	0x23c	; 0x23c <GPIO_write_low>
    }
    
    if ((bitstream >> 5) & 1)   // checking BIT5 - C5
     17e:	c5 ff       	sbrs	r28, 5
     180:	06 c0       	rjmp	.+12     	; 0x18e <output_bitstream+0x96>
    {
        GPIO_write_high(&PORTC, BIT5);
     182:	65 e0       	ldi	r22, 0x05	; 5
     184:	88 e2       	ldi	r24, 0x28	; 40
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 2b 01 	call	0x256	; 0x256 <GPIO_write_high>
     18c:	05 c0       	rjmp	.+10     	; 0x198 <output_bitstream+0xa0>
    }
    else
    {
        GPIO_write_low(&PORTC, BIT5);
     18e:	65 e0       	ldi	r22, 0x05	; 5
     190:	88 e2       	ldi	r24, 0x28	; 40
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 1e 01 	call	0x23c	; 0x23c <GPIO_write_low>
    }
    
    if ((bitstream >> 6) & 1)    // checking BIT6 - D2
     198:	c6 ff       	sbrs	r28, 6
     19a:	06 c0       	rjmp	.+12     	; 0x1a8 <output_bitstream+0xb0>
    {
        GPIO_write_high(&PORTD, BIT6);
     19c:	62 e0       	ldi	r22, 0x02	; 2
     19e:	8b e2       	ldi	r24, 0x2B	; 43
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 2b 01 	call	0x256	; 0x256 <GPIO_write_high>
     1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <output_bitstream+0xba>
    }
    else
    {
        GPIO_write_low(&PORTD, BIT6);
     1a8:	62 e0       	ldi	r22, 0x02	; 2
     1aa:	8b e2       	ldi	r24, 0x2B	; 43
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 1e 01 	call	0x23c	; 0x23c <GPIO_write_low>
    }
    
    if ((bitstream >> 7) & 1)    // checking BIT7 - D3
     1b2:	cc 23       	and	r28, r28
     1b4:	34 f4       	brge	.+12     	; 0x1c2 <output_bitstream+0xca>
    {
        GPIO_write_high(&PORTD, BIT7);
     1b6:	63 e0       	ldi	r22, 0x03	; 3
     1b8:	8b e2       	ldi	r24, 0x2B	; 43
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 2b 01 	call	0x256	; 0x256 <GPIO_write_high>
     1c0:	05 c0       	rjmp	.+10     	; 0x1cc <output_bitstream+0xd4>
    }
    else
    {
        GPIO_write_low(&PORTD, BIT7);
     1c2:	63 e0       	ldi	r22, 0x03	; 3
     1c4:	8b e2       	ldi	r24, 0x2B	; 43
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 1e 01 	call	0x23c	; 0x23c <GPIO_write_low>
    }
    
}
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <freq_to_stepsize>:
    }

    // taking integer value from float
    step_size_int = (int)cumulative_step_size;
    
    return step_size_int;
     1d0:	bc 01       	movw	r22, r24
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 18 07 	call	0xe30	; 0xe30 <__floatunsisf>
     1da:	2d ec       	ldi	r18, 0xCD	; 205
     1dc:	3c ec       	ldi	r19, 0xCC	; 204
     1de:	4c ec       	ldi	r20, 0xCC	; 204
     1e0:	5f e3       	ldi	r21, 0x3F	; 63
     1e2:	0e 94 ca 07 	call	0xf94	; 0xf94 <__mulsf3>
     1e6:	9b 01       	movw	r18, r22
     1e8:	ac 01       	movw	r20, r24
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e5       	ldi	r23, 0x50	; 80
     1ee:	83 ec       	ldi	r24, 0xC3	; 195
     1f0:	97 e4       	ldi	r25, 0x47	; 71
     1f2:	0e 94 70 06 	call	0xce0	; 0xce0 <__divsf3>
     1f6:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__fixunssfsi>
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 18 07 	call	0xe30	; 0xe30 <__floatunsisf>
     202:	9b 01       	movw	r18, r22
     204:	ac 01       	movw	r20, r24
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	8f e7       	ldi	r24, 0x7F	; 127
     20c:	93 e4       	ldi	r25, 0x43	; 67
     20e:	0e 94 70 06 	call	0xce0	; 0xce0 <__divsf3>
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	a9 01       	movw	r20, r18
     218:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__addsf3>
     21c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__fixsfsi>
     220:	86 2f       	mov	r24, r22
}
     222:	08 95       	ret

00000224 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;							// Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
     224:	fc 01       	movw	r30, r24
     226:	40 81       	ld	r20, Z
     228:	21 e0       	ldi	r18, 0x01	; 1
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	02 c0       	rjmp	.+4      	; 0x232 <GPIO_config_output+0xe>
     22e:	22 0f       	add	r18, r18
     230:	33 1f       	adc	r19, r19
     232:	6a 95       	dec	r22
     234:	e2 f7       	brpl	.-8      	; 0x22e <GPIO_config_output+0xa>
     236:	24 2b       	or	r18, r20
     238:	20 83       	st	Z, r18
     23a:	08 95       	ret

0000023c <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
     23c:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
     23e:	90 81       	ld	r25, Z
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	02 c0       	rjmp	.+4      	; 0x24a <GPIO_write_low+0xe>
     246:	22 0f       	add	r18, r18
     248:	33 1f       	adc	r19, r19
     24a:	6a 95       	dec	r22
     24c:	e2 f7       	brpl	.-8      	; 0x246 <GPIO_write_low+0xa>
     24e:	20 95       	com	r18
     250:	29 23       	and	r18, r25
     252:	20 83       	st	Z, r18
     254:	08 95       	ret

00000256 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
     256:	fc 01       	movw	r30, r24
     258:	40 81       	ld	r20, Z
     25a:	21 e0       	ldi	r18, 0x01	; 1
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	02 c0       	rjmp	.+4      	; 0x264 <GPIO_write_high+0xe>
     260:	22 0f       	add	r18, r18
     262:	33 1f       	adc	r19, r19
     264:	6a 95       	dec	r22
     266:	e2 f7       	brpl	.-8      	; 0x260 <GPIO_write_high+0xa>
     268:	24 2b       	or	r18, r20
     26a:	20 83       	st	Z, r18
     26c:	08 95       	ret

0000026e <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
     26e:	29 9a       	sbi	0x05, 1	; 5
     270:	85 e0       	ldi	r24, 0x05	; 5
     272:	8a 95       	dec	r24
     274:	f1 f7       	brne	.-4      	; 0x272 <toggle_e+0x4>
     276:	00 00       	nop
     278:	29 98       	cbi	0x05, 1	; 5
     27a:	08 95       	ret

0000027c <lcd_write>:
     27c:	cf 93       	push	r28
     27e:	c8 2f       	mov	r28, r24
     280:	66 23       	and	r22, r22
     282:	11 f0       	breq	.+4      	; 0x288 <lcd_write+0xc>
     284:	28 9a       	sbi	0x05, 0	; 5
     286:	01 c0       	rjmp	.+2      	; 0x28a <lcd_write+0xe>
     288:	28 98       	cbi	0x05, 0	; 5
     28a:	54 9a       	sbi	0x0a, 4	; 10
     28c:	55 9a       	sbi	0x0a, 5	; 10
     28e:	56 9a       	sbi	0x0a, 6	; 10
     290:	57 9a       	sbi	0x0a, 7	; 10
     292:	5f 98       	cbi	0x0b, 7	; 11
     294:	5e 98       	cbi	0x0b, 6	; 11
     296:	5d 98       	cbi	0x0b, 5	; 11
     298:	5c 98       	cbi	0x0b, 4	; 11
     29a:	cc 23       	and	r28, r28
     29c:	0c f4       	brge	.+2      	; 0x2a0 <lcd_write+0x24>
     29e:	5f 9a       	sbi	0x0b, 7	; 11
     2a0:	c6 fd       	sbrc	r28, 6
     2a2:	5e 9a       	sbi	0x0b, 6	; 11
     2a4:	c5 fd       	sbrc	r28, 5
     2a6:	5d 9a       	sbi	0x0b, 5	; 11
     2a8:	c4 fd       	sbrc	r28, 4
     2aa:	5c 9a       	sbi	0x0b, 4	; 11
     2ac:	0e 94 37 01 	call	0x26e	; 0x26e <toggle_e>
     2b0:	5f 98       	cbi	0x0b, 7	; 11
     2b2:	5e 98       	cbi	0x0b, 6	; 11
     2b4:	5d 98       	cbi	0x0b, 5	; 11
     2b6:	5c 98       	cbi	0x0b, 4	; 11
     2b8:	c3 fd       	sbrc	r28, 3
     2ba:	5f 9a       	sbi	0x0b, 7	; 11
     2bc:	c2 fd       	sbrc	r28, 2
     2be:	5e 9a       	sbi	0x0b, 6	; 11
     2c0:	c1 fd       	sbrc	r28, 1
     2c2:	5d 9a       	sbi	0x0b, 5	; 11
     2c4:	c0 fd       	sbrc	r28, 0
     2c6:	5c 9a       	sbi	0x0b, 4	; 11
     2c8:	0e 94 37 01 	call	0x26e	; 0x26e <toggle_e>
     2cc:	5c 9a       	sbi	0x0b, 4	; 11
     2ce:	5d 9a       	sbi	0x0b, 5	; 11
     2d0:	5e 9a       	sbi	0x0b, 6	; 11
     2d2:	5f 9a       	sbi	0x0b, 7	; 11
     2d4:	87 eb       	ldi	r24, 0xB7	; 183
     2d6:	9b e0       	ldi	r25, 0x0B	; 11
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_write+0x5c>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <lcd_write+0x62>
     2de:	00 00       	nop
     2e0:	cf 91       	pop	r28
     2e2:	08 95       	ret

000002e4 <lcd_command>:
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_write>
     2ea:	08 95       	ret

000002ec <lcd_gotoxy>:
     2ec:	61 11       	cpse	r22, r1
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <lcd_gotoxy+0xc>
     2f0:	80 58       	subi	r24, 0x80	; 128
     2f2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_command>
     2f6:	08 95       	ret
     2f8:	80 54       	subi	r24, 0x40	; 64
     2fa:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_command>
     2fe:	08 95       	ret

00000300 <lcd_clrscr>:
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_command>
     306:	08 95       	ret

00000308 <lcd_putc>:
     308:	61 e0       	ldi	r22, 0x01	; 1
     30a:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_write>
     30e:	08 95       	ret

00000310 <lcd_puts>:
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	ec 01       	movw	r28, r24
     316:	21 96       	adiw	r28, 0x01	; 1
     318:	fc 01       	movw	r30, r24
     31a:	80 81       	ld	r24, Z
     31c:	88 23       	and	r24, r24
     31e:	29 f0       	breq	.+10     	; 0x32a <lcd_puts+0x1a>
     320:	0e 94 84 01 	call	0x308	; 0x308 <lcd_putc>
     324:	89 91       	ld	r24, Y+
     326:	81 11       	cpse	r24, r1
     328:	fb cf       	rjmp	.-10     	; 0x320 <lcd_puts+0x10>
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     330:	cf 93       	push	r28
     332:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     334:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     336:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     338:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     33a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     33c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     33e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     340:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     342:	8f ef       	ldi	r24, 0xFF	; 255
     344:	99 ef       	ldi	r25, 0xF9	; 249
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <lcd_init+0x16>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <lcd_init+0x1c>
     34c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     34e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     350:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
     352:	0e 94 37 01 	call	0x26e	; 0x26e <toggle_e>
     356:	8f e1       	ldi	r24, 0x1F	; 31
     358:	9e e4       	ldi	r25, 0x4E	; 78
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <lcd_init+0x2a>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <lcd_init+0x30>
     360:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     362:	0e 94 37 01 	call	0x26e	; 0x26e <toggle_e>
     366:	8f ef       	ldi	r24, 0xFF	; 255
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <lcd_init+0x3a>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <lcd_init+0x40>
     370:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     372:	0e 94 37 01 	call	0x26e	; 0x26e <toggle_e>
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <lcd_init+0x4a>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <lcd_init+0x50>
     380:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     382:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
     384:	0e 94 37 01 	call	0x26e	; 0x26e <toggle_e>
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <lcd_init+0x5c>
     390:	00 c0       	rjmp	.+0      	; 0x392 <lcd_init+0x62>
     392:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     394:	88 e2       	ldi	r24, 0x28	; 40
     396:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     39a:	88 e0       	ldi	r24, 0x08	; 8
     39c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_command>
    lcd_clrscr();                  /* display clear                */
     3a0:	0e 94 80 01 	call	0x300	; 0x300 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     3a4:	86 e0       	ldi	r24, 0x06	; 6
     3a6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     3aa:	8c 2f       	mov	r24, r28
     3ac:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_command>
}/* lcd_init */
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <main>:
/* Function definitions ----------------------------------------------*/

int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
     3b4:	8c e0       	ldi	r24, 0x0C	; 12
     3b6:	0e 94 98 01 	call	0x330	; 0x330 <lcd_init>
    lcd_gotoxy(0, 0); lcd_puts("GENERATOR:");
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_gotoxy>
     3c2:	8c e0       	ldi	r24, 0x0C	; 12
     3c4:	93 e0       	ldi	r25, 0x03	; 3
     3c6:	0e 94 88 01 	call	0x310	; 0x310 <lcd_puts>
    lcd_gotoxy(0, 1); lcd_puts("FREQ:");
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_gotoxy>
     3d2:	87 e1       	ldi	r24, 0x17	; 23
     3d4:	93 e0       	ldi	r25, 0x03	; 3
     3d6:	0e 94 88 01 	call	0x310	; 0x310 <lcd_puts>
    lcd_gotoxy(11, 0);
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	8b e0       	ldi	r24, 0x0B	; 11
     3de:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_gotoxy>
    lcd_puts("SIN ");
     3e2:	8d e1       	ldi	r24, 0x1D	; 29
     3e4:	93 e0       	ldi	r25, 0x03	; 3
     3e6:	0e 94 88 01 	call	0x310	; 0x310 <lcd_puts>
    
    // Initialize R2R output 
    output_init();
     3ea:	0e 94 53 00 	call	0xa6	; 0xa6 <output_init>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |= (1 << REFS0);
     3ee:	ec e7       	ldi	r30, 0x7C	; 124
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	80 81       	ld	r24, Z
     3f4:	80 64       	ori	r24, 0x40	; 64
     3f6:	80 83       	st	Z, r24
    ADMUX &= ~(1 <<REFS1);
     3f8:	80 81       	ld	r24, Z
     3fa:	8f 77       	andi	r24, 0x7F	; 127
     3fc:	80 83       	st	Z, r24

    // Set input channel to ADC0
    ADMUX &= ~(15);
     3fe:	80 81       	ld	r24, Z
     400:	80 7f       	andi	r24, 0xF0	; 240
     402:	80 83       	st	Z, r24

    // Enable ADC module
    ADCSRA |= (1 << ADEN);
     404:	ca e7       	ldi	r28, 0x7A	; 122
     406:	d0 e0       	ldi	r29, 0x00	; 0
     408:	88 81       	ld	r24, Y
     40a:	80 68       	ori	r24, 0x80	; 128
     40c:	88 83       	st	Y, r24

    // Enable conversion complete interrupt
    ADCSRA |= (1 << ADIE);
     40e:	88 81       	ld	r24, Y
     410:	88 60       	ori	r24, 0x08	; 8
     412:	88 83       	st	Y, r24

    // Set clock prescaler to 128
    ADCSRA |= 7;
     414:	88 81       	ld	r24, Y
     416:	87 60       	ori	r24, 0x07	; 7
     418:	88 83       	st	Y, r24


    // Configuration 16-bit Timer/Counter1  and Timer/Counter0 
    TIM1_overflow_interrupt_enable();
     41a:	ef e6       	ldi	r30, 0x6F	; 111
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	81 60       	ori	r24, 0x01	; 1
     422:	80 83       	st	Z, r24
    TIM1_overflow_262ms();
     424:	e1 e8       	ldi	r30, 0x81	; 129
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	8b 7f       	andi	r24, 0xFB	; 251
     42c:	80 83       	st	Z, r24
     42e:	80 81       	ld	r24, Z
     430:	83 60       	ori	r24, 0x03	; 3
     432:	80 83       	st	Z, r24

    TIM0_overflow_interrupt_enable();
     434:	ee e6       	ldi	r30, 0x6E	; 110
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	81 60       	ori	r24, 0x01	; 1
     43c:	80 83       	st	Z, r24
    TIM0_overflow_16us();
     43e:	85 b5       	in	r24, 0x25	; 37
     440:	89 7f       	andi	r24, 0xF9	; 249
     442:	85 bd       	out	0x25, r24	; 37
     444:	85 b5       	in	r24, 0x25	; 37
     446:	81 60       	ori	r24, 0x01	; 1
     448:	85 bd       	out	0x25, r24	; 37

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
     44a:	81 e1       	ldi	r24, 0x11	; 17
     44c:	94 e0       	ldi	r25, 0x04	; 4
     44e:	0e 94 e5 05 	call	0xbca	; 0xbca <uart_init>


    // Enables interrupts by setting the global interrupt mask
    sei();
     452:	78 94       	sei
    
    // Initialization ADC
    ADCSRA |= (1 << ADSC);
     454:	88 81       	ld	r24, Y
     456:	80 64       	ori	r24, 0x40	; 64
     458:	88 83       	st	Y, r24
     45a:	ff cf       	rjmp	.-2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

0000045c <__vector_13>:
    return 0;
}

/* Interrupt service routines ----------------------------------------*/
ISR(TIMER1_OVF_vect)
{   
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	2f 93       	push	r18
     46c:	3f 93       	push	r19
     46e:	4f 93       	push	r20
     470:	5f 93       	push	r21
     472:	6f 93       	push	r22
     474:	7f 93       	push	r23
     476:	8f 93       	push	r24
     478:	9f 93       	push	r25
     47a:	af 93       	push	r26
     47c:	bf 93       	push	r27
     47e:	ef 93       	push	r30
     480:	ff 93       	push	r31
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	00 d0       	rcall	.+0      	; 0x488 <__vector_13+0x2c>
     488:	00 d0       	rcall	.+0      	; 0x48a <__vector_13+0x2e>
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
    // setting variables
    uint16_t value = 0;
    char lcd_string[4] = "0000";
     48e:	80 e3       	ldi	r24, 0x30	; 48
     490:	90 e3       	ldi	r25, 0x30	; 48
     492:	9a 83       	std	Y+2, r25	; 0x02
     494:	89 83       	std	Y+1, r24	; 0x01
     496:	9c 83       	std	Y+4, r25	; 0x04
     498:	8b 83       	std	Y+3, r24	; 0x03
    
    static uint8_t position = 0;        // position of digits
    static char frq_string[10] = "10"; 
       
    value = ADC;    // Copy ADC result to 16-bit variable    
     49a:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     49e:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     4a2:	4a e0       	ldi	r20, 0x0A	; 10
     4a4:	be 01       	movw	r22, r28
     4a6:	6f 5f       	subi	r22, 0xFF	; 255
     4a8:	7f 4f       	sbci	r23, 0xFF	; 255
     4aa:	c8 01       	movw	r24, r16
     4ac:	0e 94 55 08 	call	0x10aa	; 0x10aa <__itoa_ncheck>
    itoa(value, lcd_string, 10);    // Convert to string in decimal
     
        
    
    lcd_gotoxy(8, 1);           // Clearing freq positions
     4b0:	61 e0       	ldi	r22, 0x01	; 1
     4b2:	88 e0       	ldi	r24, 0x08	; 8
     4b4:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_gotoxy>
    lcd_puts("           ");
     4b8:	82 e2       	ldi	r24, 0x22	; 34
     4ba:	93 e0       	ldi	r25, 0x03	; 3
     4bc:	0e 94 88 01 	call	0x310	; 0x310 <lcd_puts>
    
    lcd_gotoxy(7, 1);           // Printing frequency
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	87 e0       	ldi	r24, 0x07	; 7
     4c4:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_gotoxy>
    lcd_puts(frq_string);
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 88 01 	call	0x310	; 0x310 <lcd_puts>
    
    lcd_gotoxy(12,1);          
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	8c e0       	ldi	r24, 0x0C	; 12
     4d4:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_gotoxy>
    lcd_puts("Hz");
     4d8:	8e e2       	ldi	r24, 0x2E	; 46
     4da:	93 e0       	ldi	r25, 0x03	; 3
     4dc:	0e 94 88 01 	call	0x310	; 0x310 <lcd_puts>

    

    if (value < 50)
     4e0:	02 33       	cpi	r16, 0x32	; 50
     4e2:	11 05       	cpc	r17, r1
     4e4:	08 f4       	brcc	.+2      	; 0x4e8 <__vector_13+0x8c>
     4e6:	42 c1       	rjmp	.+644    	; 0x76c <__vector_13+0x310>
        //lcd_gotoxy(8, 1);
        //lcd_puts("None");
    } 
    else
    {
        if (value > 600)
     4e8:	09 35       	cpi	r16, 0x59	; 89
     4ea:	42 e0       	ldi	r20, 0x02	; 2
     4ec:	14 07       	cpc	r17, r20
     4ee:	88 f0       	brcs	.+34     	; 0x512 <__vector_13+0xb6>
        {
            button = '7';                       // updating button variable storing last pressed key
     4f0:	97 e3       	ldi	r25, 0x37	; 55
     4f2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <button>
            frq_string[position] = '7';         // Adding 7 to frequency string
     4f6:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <position.1978>
     4fa:	e8 2f       	mov	r30, r24
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	e0 50       	subi	r30, 0x00	; 0
     500:	ff 4f       	sbci	r31, 0xFF	; 255
     502:	90 83       	st	Z, r25
            if (position < 3) {position++;}     // incrementing position
     504:	83 30       	cpi	r24, 0x03	; 3
     506:	08 f0       	brcs	.+2      	; 0x50a <__vector_13+0xae>
     508:	31 c1       	rjmp	.+610    	; 0x76c <__vector_13+0x310>
     50a:	8f 5f       	subi	r24, 0xFF	; 255
     50c:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <position.1978>
     510:	2d c1       	rjmp	.+602    	; 0x76c <__vector_13+0x310>
        } 
        else
        {
            if (value > 400)
     512:	01 39       	cpi	r16, 0x91	; 145
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	18 07       	cpc	r17, r24
     518:	88 f0       	brcs	.+34     	; 0x53c <__vector_13+0xe0>
            {
                button = '8';
     51a:	98 e3       	ldi	r25, 0x38	; 56
     51c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <button>
                frq_string[position] = '8';
     520:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <position.1978>
     524:	e8 2f       	mov	r30, r24
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	e0 50       	subi	r30, 0x00	; 0
     52a:	ff 4f       	sbci	r31, 0xFF	; 255
     52c:	90 83       	st	Z, r25
                if (position < 3) {position++;}
     52e:	83 30       	cpi	r24, 0x03	; 3
     530:	08 f0       	brcs	.+2      	; 0x534 <__vector_13+0xd8>
     532:	1c c1       	rjmp	.+568    	; 0x76c <__vector_13+0x310>
     534:	8f 5f       	subi	r24, 0xFF	; 255
     536:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <position.1978>
     53a:	18 c1       	rjmp	.+560    	; 0x76c <__vector_13+0x310>
            } 
            else
            {
                if (value > 280)
     53c:	09 31       	cpi	r16, 0x19	; 25
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	14 07       	cpc	r17, r20
     542:	88 f0       	brcs	.+34     	; 0x566 <__vector_13+0x10a>
                {
                    button = '9';
     544:	99 e3       	ldi	r25, 0x39	; 57
     546:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <button>
                    frq_string[position] = '9';
     54a:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <position.1978>
     54e:	e8 2f       	mov	r30, r24
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	e0 50       	subi	r30, 0x00	; 0
     554:	ff 4f       	sbci	r31, 0xFF	; 255
     556:	90 83       	st	Z, r25
                    if (position < 3) {position++;}
     558:	83 30       	cpi	r24, 0x03	; 3
     55a:	08 f0       	brcs	.+2      	; 0x55e <__vector_13+0x102>
     55c:	07 c1       	rjmp	.+526    	; 0x76c <__vector_13+0x310>
     55e:	8f 5f       	subi	r24, 0xFF	; 255
     560:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <position.1978>
     564:	03 c1       	rjmp	.+518    	; 0x76c <__vector_13+0x310>
                } 
                else
                {
                    if (value > 240)
     566:	01 3f       	cpi	r16, 0xF1	; 241
     568:	11 05       	cpc	r17, r1
     56a:	60 f0       	brcs	.+24     	; 0x584 <__vector_13+0x128>
                    {
                        lcd_gotoxy(11, 0);
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	8b e0       	ldi	r24, 0x0B	; 11
     570:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_gotoxy>
                        lcd_puts("SIN   ");     // Printing sin
     574:	81 e3       	ldi	r24, 0x31	; 49
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	0e 94 88 01 	call	0x310	; 0x310 <lcd_puts>
                        gen = 'S';              // updating gen mode
     57c:	83 e5       	ldi	r24, 0x53	; 83
     57e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <gen>
     582:	f4 c0       	rjmp	.+488    	; 0x76c <__vector_13+0x310>
                    } 
                    else
                    {
                        if (value > 200)
     584:	09 3c       	cpi	r16, 0xC9	; 201
     586:	11 05       	cpc	r17, r1
     588:	88 f0       	brcs	.+34     	; 0x5ac <__vector_13+0x150>
                        {
                          button = '4';
     58a:	94 e3       	ldi	r25, 0x34	; 52
     58c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <button>
                          frq_string[position] = '4';
     590:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <position.1978>
     594:	e8 2f       	mov	r30, r24
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	e0 50       	subi	r30, 0x00	; 0
     59a:	ff 4f       	sbci	r31, 0xFF	; 255
     59c:	90 83       	st	Z, r25
                          if (position < 3) {position++;}  
     59e:	83 30       	cpi	r24, 0x03	; 3
     5a0:	08 f0       	brcs	.+2      	; 0x5a4 <__vector_13+0x148>
     5a2:	e4 c0       	rjmp	.+456    	; 0x76c <__vector_13+0x310>
     5a4:	8f 5f       	subi	r24, 0xFF	; 255
     5a6:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <position.1978>
     5aa:	e0 c0       	rjmp	.+448    	; 0x76c <__vector_13+0x310>
                        } 
                        else
                        {
                            if (value > 170)
     5ac:	0b 3a       	cpi	r16, 0xAB	; 171
     5ae:	11 05       	cpc	r17, r1
     5b0:	88 f0       	brcs	.+34     	; 0x5d4 <__vector_13+0x178>
                            {
                                button = '5';
     5b2:	95 e3       	ldi	r25, 0x35	; 53
     5b4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <button>
                                frq_string[position] = '5';
     5b8:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <position.1978>
     5bc:	e8 2f       	mov	r30, r24
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	e0 50       	subi	r30, 0x00	; 0
     5c2:	ff 4f       	sbci	r31, 0xFF	; 255
     5c4:	90 83       	st	Z, r25
                                if (position < 3) {position++;}
     5c6:	83 30       	cpi	r24, 0x03	; 3
     5c8:	08 f0       	brcs	.+2      	; 0x5cc <__vector_13+0x170>
     5ca:	d0 c0       	rjmp	.+416    	; 0x76c <__vector_13+0x310>
     5cc:	8f 5f       	subi	r24, 0xFF	; 255
     5ce:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <position.1978>
     5d2:	cc c0       	rjmp	.+408    	; 0x76c <__vector_13+0x310>
                            } 
                            else
                            {
                                if (value > 145)
     5d4:	02 39       	cpi	r16, 0x92	; 146
     5d6:	11 05       	cpc	r17, r1
     5d8:	88 f0       	brcs	.+34     	; 0x5fc <__vector_13+0x1a0>
                                {
                                   button = '6';
     5da:	96 e3       	ldi	r25, 0x36	; 54
     5dc:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <button>
                                   frq_string[position] = '6';
     5e0:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <position.1978>
     5e4:	e8 2f       	mov	r30, r24
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	e0 50       	subi	r30, 0x00	; 0
     5ea:	ff 4f       	sbci	r31, 0xFF	; 255
     5ec:	90 83       	st	Z, r25
                                   if (position < 3) {position++;}
     5ee:	83 30       	cpi	r24, 0x03	; 3
     5f0:	08 f0       	brcs	.+2      	; 0x5f4 <__vector_13+0x198>
     5f2:	bc c0       	rjmp	.+376    	; 0x76c <__vector_13+0x310>
     5f4:	8f 5f       	subi	r24, 0xFF	; 255
     5f6:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <position.1978>
     5fa:	b8 c0       	rjmp	.+368    	; 0x76c <__vector_13+0x310>
                                } 
                                else
                                {
                                    if (value > 131)
     5fc:	04 38       	cpi	r16, 0x84	; 132
     5fe:	11 05       	cpc	r17, r1
     600:	60 f0       	brcs	.+24     	; 0x61a <__vector_13+0x1be>
                                    {
                                        lcd_gotoxy(11, 0);
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	8b e0       	ldi	r24, 0x0B	; 11
     606:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_gotoxy>
                                        lcd_puts("RAMP  ");     // Printing RAMP
     60a:	88 e3       	ldi	r24, 0x38	; 56
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	0e 94 88 01 	call	0x310	; 0x310 <lcd_puts>
                                        gen = 'R';              // Updating gen mode
     612:	82 e5       	ldi	r24, 0x52	; 82
     614:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <gen>
     618:	a9 c0       	rjmp	.+338    	; 0x76c <__vector_13+0x310>
                                    } 
                                    else
                                    {
                                        if (value > 120)
     61a:	09 37       	cpi	r16, 0x79	; 121
     61c:	11 05       	cpc	r17, r1
     61e:	88 f0       	brcs	.+34     	; 0x642 <__vector_13+0x1e6>
                                        {
                                            button = '1';
     620:	91 e3       	ldi	r25, 0x31	; 49
     622:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <button>
                                            frq_string[position] = '1';
     626:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <position.1978>
     62a:	e8 2f       	mov	r30, r24
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	e0 50       	subi	r30, 0x00	; 0
     630:	ff 4f       	sbci	r31, 0xFF	; 255
     632:	90 83       	st	Z, r25
                                            if (position < 3) {position++;}
     634:	83 30       	cpi	r24, 0x03	; 3
     636:	08 f0       	brcs	.+2      	; 0x63a <__vector_13+0x1de>
     638:	99 c0       	rjmp	.+306    	; 0x76c <__vector_13+0x310>
     63a:	8f 5f       	subi	r24, 0xFF	; 255
     63c:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <position.1978>
     640:	95 c0       	rjmp	.+298    	; 0x76c <__vector_13+0x310>
                                        } 
                                        else
                                        {
                                            if (value > 108)
     642:	0d 36       	cpi	r16, 0x6D	; 109
     644:	11 05       	cpc	r17, r1
     646:	88 f0       	brcs	.+34     	; 0x66a <__vector_13+0x20e>
                                            {
                                               button = '2';
     648:	92 e3       	ldi	r25, 0x32	; 50
     64a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <button>
                                               frq_string[position] = '2';
     64e:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <position.1978>
     652:	e8 2f       	mov	r30, r24
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	e0 50       	subi	r30, 0x00	; 0
     658:	ff 4f       	sbci	r31, 0xFF	; 255
     65a:	90 83       	st	Z, r25
                                               if (position < 3) {position++;}
     65c:	83 30       	cpi	r24, 0x03	; 3
     65e:	08 f0       	brcs	.+2      	; 0x662 <__vector_13+0x206>
     660:	85 c0       	rjmp	.+266    	; 0x76c <__vector_13+0x310>
     662:	8f 5f       	subi	r24, 0xFF	; 255
     664:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <position.1978>
     668:	81 c0       	rjmp	.+258    	; 0x76c <__vector_13+0x310>
                                            } 
                                            else
                                            {
                                                if (value > 97)
     66a:	02 36       	cpi	r16, 0x62	; 98
     66c:	11 05       	cpc	r17, r1
     66e:	88 f0       	brcs	.+34     	; 0x692 <__vector_13+0x236>
                                                {
                                                    button = '3';
     670:	93 e3       	ldi	r25, 0x33	; 51
     672:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <button>
                                                    frq_string[position] = '3';
     676:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <position.1978>
     67a:	e8 2f       	mov	r30, r24
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	e0 50       	subi	r30, 0x00	; 0
     680:	ff 4f       	sbci	r31, 0xFF	; 255
     682:	90 83       	st	Z, r25
                                                    if (position < 3) {position++;}
     684:	83 30       	cpi	r24, 0x03	; 3
     686:	08 f0       	brcs	.+2      	; 0x68a <__vector_13+0x22e>
     688:	71 c0       	rjmp	.+226    	; 0x76c <__vector_13+0x310>
     68a:	8f 5f       	subi	r24, 0xFF	; 255
     68c:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <position.1978>
     690:	6d c0       	rjmp	.+218    	; 0x76c <__vector_13+0x310>
                                                } 
                                                else
                                                {
                                                    if (value > 90)
     692:	0b 35       	cpi	r16, 0x5B	; 91
     694:	11 05       	cpc	r17, r1
     696:	60 f0       	brcs	.+24     	; 0x6b0 <__vector_13+0x254>
                                                    {
                                                        lcd_gotoxy(11, 0);      // Printing SQR
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	8b e0       	ldi	r24, 0x0B	; 11
     69c:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_gotoxy>
                                                        lcd_puts("SQR   ");
     6a0:	8f e3       	ldi	r24, 0x3F	; 63
     6a2:	93 e0       	ldi	r25, 0x03	; 3
     6a4:	0e 94 88 01 	call	0x310	; 0x310 <lcd_puts>
                                                        gen = 'Q';              // updating gen mode
     6a8:	81 e5       	ldi	r24, 0x51	; 81
     6aa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <gen>
     6ae:	5e c0       	rjmp	.+188    	; 0x76c <__vector_13+0x310>
                                                    } 
                                                    else
                                                    {
                                                        if (value > 85)
     6b0:	06 35       	cpi	r16, 0x56	; 86
     6b2:	11 05       	cpc	r17, r1
     6b4:	e8 f0       	brcs	.+58     	; 0x6f0 <__vector_13+0x294>
                                                        {                                                           
                                                            button = '*';
     6b6:	8a e2       	ldi	r24, 0x2A	; 42
     6b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <button>
                                                                                        // used for clearing freq string to default (10 Hz)
                                                            
                                                            lcd_gotoxy(5, 1);           // Clearing freq positions
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	85 e0       	ldi	r24, 0x05	; 5
     6c0:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_gotoxy>
                                                            lcd_puts("           ");
     6c4:	82 e2       	ldi	r24, 0x22	; 34
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	0e 94 88 01 	call	0x310	; 0x310 <lcd_puts>
                                                            frq_string[0] = '1';        // Seting freq string to "10        "
     6cc:	e0 e0       	ldi	r30, 0x00	; 0
     6ce:	f1 e0       	ldi	r31, 0x01	; 1
     6d0:	81 e3       	ldi	r24, 0x31	; 49
     6d2:	80 83       	st	Z, r24
                                                            frq_string[1] = '0';
     6d4:	80 e3       	ldi	r24, 0x30	; 48
     6d6:	81 83       	std	Z+1, r24	; 0x01
                                                            frq_string[2] = ' ';
     6d8:	80 e2       	ldi	r24, 0x20	; 32
     6da:	82 83       	std	Z+2, r24	; 0x02
                                                            frq_string[3] = ' ';
     6dc:	83 83       	std	Z+3, r24	; 0x03
                                                            frq_string[4] = ' ';
     6de:	84 83       	std	Z+4, r24	; 0x04
                                                            frq_string[5] = ' ';
     6e0:	85 83       	std	Z+5, r24	; 0x05
                                                            frq_string[6] = ' ';
     6e2:	86 83       	std	Z+6, r24	; 0x06
                                                            frq_string[7] = ' ';
     6e4:	87 83       	std	Z+7, r24	; 0x07
                                                            frq_string[8] = ' ';
     6e6:	80 87       	std	Z+8, r24	; 0x08
                                                            frq_string[9] = ' ';
     6e8:	81 87       	std	Z+9, r24	; 0x09
                                                            
                                                            
                                                            position = 0;           // reseting position
     6ea:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <position.1978>
     6ee:	3e c0       	rjmp	.+124    	; 0x76c <__vector_13+0x310>
                                                        } 
                                                        else
                                                        {
                                                            if (value > 77)
     6f0:	0e 34       	cpi	r16, 0x4E	; 78
     6f2:	11 05       	cpc	r17, r1
     6f4:	80 f0       	brcs	.+32     	; 0x716 <__vector_13+0x2ba>
                                                            {
                                                               button = '0';
     6f6:	90 e3       	ldi	r25, 0x30	; 48
     6f8:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <button>
                                                               frq_string[position] = '0';
     6fc:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <position.1978>
     700:	e8 2f       	mov	r30, r24
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	e0 50       	subi	r30, 0x00	; 0
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	90 83       	st	Z, r25
                                                               if (position < 3) {position++;}
     70a:	83 30       	cpi	r24, 0x03	; 3
     70c:	78 f5       	brcc	.+94     	; 0x76c <__vector_13+0x310>
     70e:	8f 5f       	subi	r24, 0xFF	; 255
     710:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <position.1978>
     714:	2b c0       	rjmp	.+86     	; 0x76c <__vector_13+0x310>
                                                            } 
                                                            else
                                                            {
                                                                if (value > 73)
     716:	0a 34       	cpi	r16, 0x4A	; 74
     718:	11 05       	cpc	r17, r1
     71a:	e8 f0       	brcs	.+58     	; 0x756 <__vector_13+0x2fa>
                                                                {
                                                                   button = '#';
     71c:	83 e2       	ldi	r24, 0x23	; 35
     71e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <button>
                                                                   position = 0;    // reseting positon
     722:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <position.1978>
                                                                   if ((atoi(frq_string) <= 5000) & (atoi(frq_string) > 9) )
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 37 08 	call	0x106e	; 0x106e <atoi>
     72e:	9c 01       	movw	r18, r24
     730:	2a 50       	subi	r18, 0x0A	; 10
     732:	31 09       	sbc	r19, r1
     734:	2f 37       	cpi	r18, 0x7F	; 127
     736:	33 41       	sbci	r19, 0x13	; 19
     738:	28 f4       	brcc	.+10     	; 0x744 <__vector_13+0x2e8>
                                                                   {
                                                                       Frequency =  atoi(frq_string);   // storing frequency from string
     73a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <Frequency+0x1>
     73e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Frequency>
     742:	14 c0       	rjmp	.+40     	; 0x76c <__vector_13+0x310>
                                                                   }
                                                                   else
                                                                   {
                                                                      lcd_gotoxy(7, 1);
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	87 e0       	ldi	r24, 0x07	; 7
     748:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_gotoxy>
                                                                      lcd_puts("error");        //  printing error if frequenci is not in the boundries (10 < Freq < 5k)
     74c:	86 e4       	ldi	r24, 0x46	; 70
     74e:	93 e0       	ldi	r25, 0x03	; 3
     750:	0e 94 88 01 	call	0x310	; 0x310 <lcd_puts>
     754:	0b c0       	rjmp	.+22     	; 0x76c <__vector_13+0x310>
                                                                   }

                                                                } 
                                                                else
                                                                {
                                                                    lcd_gotoxy(11, 0);
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	8b e0       	ldi	r24, 0x0B	; 11
     75a:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_gotoxy>
                                                                    lcd_puts("DTMF");       //Printing DTMF
     75e:	8c e4       	ldi	r24, 0x4C	; 76
     760:	93 e0       	ldi	r25, 0x03	; 3
     762:	0e 94 88 01 	call	0x310	; 0x310 <lcd_puts>
                                                                    gen = 'D';              // updating den mode
     766:	84 e4       	ldi	r24, 0x44	; 68
     768:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <gen>
                }
            }
        }
    }
    
    ADCSRA |= (1 << ADSC);  // starting AD conversion
     76c:	ea e7       	ldi	r30, 0x7A	; 122
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	80 64       	ori	r24, 0x40	; 64
     774:	80 83       	st	Z, r24
}
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	ff 91       	pop	r31
     784:	ef 91       	pop	r30
     786:	bf 91       	pop	r27
     788:	af 91       	pop	r26
     78a:	9f 91       	pop	r25
     78c:	8f 91       	pop	r24
     78e:	7f 91       	pop	r23
     790:	6f 91       	pop	r22
     792:	5f 91       	pop	r21
     794:	4f 91       	pop	r20
     796:	3f 91       	pop	r19
     798:	2f 91       	pop	r18
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	0f 90       	pop	r0
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	0f 90       	pop	r0
     7a4:	1f 90       	pop	r1
     7a6:	18 95       	reti

000007a8 <__vector_16>:


ISR(TIMER0_OVF_vect)
{
     7a8:	1f 92       	push	r1
     7aa:	0f 92       	push	r0
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	0f 92       	push	r0
     7b0:	11 24       	eor	r1, r1
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	2f 93       	push	r18
     7bc:	3f 93       	push	r19
     7be:	4f 93       	push	r20
     7c0:	5f 93       	push	r21
     7c2:	6f 93       	push	r22
     7c4:	7f 93       	push	r23
     7c6:	8f 93       	push	r24
     7c8:	9f 93       	push	r25
     7ca:	af 93       	push	r26
     7cc:	bf 93       	push	r27
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	ef 93       	push	r30
     7d4:	ff 93       	push	r31
    uint8_t step_size_int =0;
    step_size = (float)255/steps;       // calculation size of step
    
    static float cumulative_step_size = 0;
        
    if (cumulative_step_size < 1)
     7d6:	c0 90 58 03 	lds	r12, 0x0358	; 0x800358 <cumulative_step_size.1989>
     7da:	d0 90 59 03 	lds	r13, 0x0359	; 0x800359 <cumulative_step_size.1989+0x1>
     7de:	e0 90 5a 03 	lds	r14, 0x035A	; 0x80035a <cumulative_step_size.1989+0x2>
     7e2:	f0 90 5b 03 	lds	r15, 0x035B	; 0x80035b <cumulative_step_size.1989+0x3>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e8       	ldi	r20, 0x80	; 128
     7ec:	5f e3       	ldi	r21, 0x3F	; 63
     7ee:	c7 01       	movw	r24, r14
     7f0:	b6 01       	movw	r22, r12
     7f2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__cmpsf2>
     7f6:	88 23       	and	r24, r24
     7f8:	8c f5       	brge	.+98     	; 0x85c <__vector_16+0xb4>
    {
        cumulative_step_size += step_size ;
     7fa:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <Frequency>
     7fe:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <Frequency+0x1>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 18 07 	call	0xe30	; 0xe30 <__floatunsisf>
     80a:	2d ec       	ldi	r18, 0xCD	; 205
     80c:	3c ec       	ldi	r19, 0xCC	; 204
     80e:	4c ec       	ldi	r20, 0xCC	; 204
     810:	5f e3       	ldi	r21, 0x3F	; 63
     812:	0e 94 ca 07 	call	0xf94	; 0xf94 <__mulsf3>
     816:	9b 01       	movw	r18, r22
     818:	ac 01       	movw	r20, r24
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	70 e5       	ldi	r23, 0x50	; 80
     81e:	83 ec       	ldi	r24, 0xC3	; 195
     820:	97 e4       	ldi	r25, 0x47	; 71
     822:	0e 94 70 06 	call	0xce0	; 0xce0 <__divsf3>
     826:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__fixunssfsi>
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 18 07 	call	0xe30	; 0xe30 <__floatunsisf>
     832:	9b 01       	movw	r18, r22
     834:	ac 01       	movw	r20, r24
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	8f e7       	ldi	r24, 0x7F	; 127
     83c:	93 e4       	ldi	r25, 0x43	; 67
     83e:	0e 94 70 06 	call	0xce0	; 0xce0 <__divsf3>
     842:	a7 01       	movw	r20, r14
     844:	96 01       	movw	r18, r12
     846:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__addsf3>
     84a:	60 93 58 03 	sts	0x0358, r22	; 0x800358 <cumulative_step_size.1989>
     84e:	70 93 59 03 	sts	0x0359, r23	; 0x800359 <cumulative_step_size.1989+0x1>
     852:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <cumulative_step_size.1989+0x2>
     856:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <cumulative_step_size.1989+0x3>
     85a:	08 c0       	rjmp	.+16     	; 0x86c <__vector_16+0xc4>
            
    }
    else
    {
        cumulative_step_size = 0;
     85c:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <cumulative_step_size.1989>
     860:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <cumulative_step_size.1989+0x1>
     864:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <cumulative_step_size.1989+0x2>
     868:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cumulative_step_size.1989+0x3>
    }
        
    step_size_int = (int)cumulative_step_size;      // taking integer value from float
     86c:	60 91 58 03 	lds	r22, 0x0358	; 0x800358 <cumulative_step_size.1989>
     870:	70 91 59 03 	lds	r23, 0x0359	; 0x800359 <cumulative_step_size.1989+0x1>
     874:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <cumulative_step_size.1989+0x2>
     878:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <cumulative_step_size.1989+0x3>
     87c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__fixsfsi>
     880:	6b 01       	movw	r12, r22
     882:	7c 01       	movw	r14, r24
 
 
    // function for SIN
    static uint8_t position = 0;  
    if (gen == 'S')
     884:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <gen>
     888:	93 35       	cpi	r25, 0x53	; 83
     88a:	89 f4       	brne	.+34     	; 0x8ae <__vector_16+0x106>
    {
        bitstream = table[position];        // taking values from look-up table
     88c:	e0 91 57 03 	lds	r30, 0x0357	; 0x800357 <position.1990>
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	ee 0f       	add	r30, r30
     894:	ff 1f       	adc	r31, r31
     896:	e2 5f       	subi	r30, 0xF2	; 242
     898:	fe 4f       	sbci	r31, 0xFE	; 254
     89a:	80 81       	ld	r24, Z
     89c:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <bitstream.1985>
        output_bitstream(bitstream);
     8a0:	0e 94 7c 00 	call	0xf8	; 0xf8 <output_bitstream>
            if (position  < sizeof(table))      //updating position
            {
                position+= step_size_int;
     8a4:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <position.1990>
     8a8:	8c 0d       	add	r24, r12
     8aa:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <position.1990>
            }
    } 
     
    
    //Function for RAMP
    if (gen == 'R')
     8ae:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <gen>
     8b2:	92 35       	cpi	r25, 0x52	; 82
     8b4:	d1 f4       	brne	.+52     	; 0x8ea <__vector_16+0x142>
    {   
        if ((bitstream +step_size_int) <= 0xff) 
     8b6:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <bitstream.1985>
     8ba:	96 01       	movw	r18, r12
     8bc:	33 27       	eor	r19, r19
     8be:	28 0f       	add	r18, r24
     8c0:	31 1d       	adc	r19, r1
     8c2:	2f 3f       	cpi	r18, 0xFF	; 255
     8c4:	31 05       	cpc	r19, r1
     8c6:	09 f0       	breq	.+2      	; 0x8ca <__vector_16+0x122>
     8c8:	34 f4       	brge	.+12     	; 0x8d6 <__vector_16+0x12e>
        {    
            bitstream += step_size_int;        // increasing output value until
     8ca:	8c 0d       	add	r24, r12
     8cc:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <bitstream.1985>
            output_bitstream(bitstream);       
     8d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <output_bitstream>
     8d4:	0a c0       	rjmp	.+20     	; 0x8ea <__vector_16+0x142>
        } 
        else
        {
            bitstream = 0xff;               //reseting output value
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <bitstream.1985>
            output_bitstream(bitstream);
     8dc:	0e 94 7c 00 	call	0xf8	; 0xf8 <output_bitstream>
            bitstream = 0x00;
     8e0:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <bitstream.1985>
            output_bitstream(bitstream);
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	0e 94 7c 00 	call	0xf8	; 0xf8 <output_bitstream>
        }
    }
    
    // funktion for square
    if (gen == 'Q')
     8ea:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <gen>
     8ee:	81 35       	cpi	r24, 0x51	; 81
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <__vector_16+0x14c>
     8f2:	42 c0       	rjmp	.+132    	; 0x978 <__stack+0x79>
    {
    static uint16_t counter = 0;  
    uint16_t steps = 100000/(1.6*Frequency);  
     8f4:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <Frequency>
     8f8:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <Frequency+0x1>
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 18 07 	call	0xe30	; 0xe30 <__floatunsisf>
     904:	2d ec       	ldi	r18, 0xCD	; 205
     906:	3c ec       	ldi	r19, 0xCC	; 204
     908:	4c ec       	ldi	r20, 0xCC	; 204
     90a:	5f e3       	ldi	r21, 0x3F	; 63
     90c:	0e 94 ca 07 	call	0xf94	; 0xf94 <__mulsf3>
     910:	9b 01       	movw	r18, r22
     912:	ac 01       	movw	r20, r24
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	70 e5       	ldi	r23, 0x50	; 80
     918:	83 ec       	ldi	r24, 0xC3	; 195
     91a:	97 e4       	ldi	r25, 0x47	; 71
     91c:	0e 94 70 06 	call	0xce0	; 0xce0 <__divsf3>
     920:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__fixunssfsi>
     924:	ab 01       	movw	r20, r22
    
    if (counter < steps/2)      // half of the steps low value
     926:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <counter.1991>
     92a:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <counter.1991+0x1>
     92e:	76 95       	lsr	r23
     930:	67 95       	ror	r22
     932:	26 17       	cp	r18, r22
     934:	37 07       	cpc	r19, r23
     936:	60 f4       	brcc	.+24     	; 0x950 <__stack+0x51>
    {
        counter++;
     938:	2f 5f       	subi	r18, 0xFF	; 255
     93a:	3f 4f       	sbci	r19, 0xFF	; 255
     93c:	30 93 55 03 	sts	0x0355, r19	; 0x800355 <counter.1991+0x1>
     940:	20 93 54 03 	sts	0x0354, r18	; 0x800354 <counter.1991>
        bitstream = 0xff;
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <bitstream.1985>
        output_bitstream(bitstream);
     94a:	0e 94 7c 00 	call	0xf8	; 0xf8 <output_bitstream>
     94e:	14 c0       	rjmp	.+40     	; 0x978 <__stack+0x79>

    }
    else if (counter < steps)   //other half high value
     950:	24 17       	cp	r18, r20
     952:	35 07       	cpc	r19, r21
     954:	60 f4       	brcc	.+24     	; 0x96e <__stack+0x6f>
        {
            counter++;
     956:	2f 5f       	subi	r18, 0xFF	; 255
     958:	3f 4f       	sbci	r19, 0xFF	; 255
     95a:	30 93 55 03 	sts	0x0355, r19	; 0x800355 <counter.1991+0x1>
     95e:	20 93 54 03 	sts	0x0354, r18	; 0x800354 <counter.1991>
            bitstream = 0x00;
     962:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <bitstream.1985>
            output_bitstream(bitstream);
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	0e 94 7c 00 	call	0xf8	; 0xf8 <output_bitstream>
     96c:	05 c0       	rjmp	.+10     	; 0x978 <__stack+0x79>
        }
        else {counter = 0;}     //reseting counter
     96e:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <counter.1991+0x1>
     972:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <counter.1991>
     976:	ba c0       	rjmp	.+372    	; 0xaec <__stack+0x1ed>
    }
        

    //function for DTMF
    if (gen == 'D')
     978:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <gen>
     97c:	84 34       	cpi	r24, 0x44	; 68
     97e:	09 f0       	breq	.+2      	; 0x982 <__stack+0x83>
     980:	b5 c0       	rjmp	.+362    	; 0xaec <__stack+0x1ed>
    {
        lcd_gotoxy(15, 0);
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	8f e0       	ldi	r24, 0x0F	; 15
     986:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_gotoxy>
        lcd_putc(button);       // Printing selected button
     98a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <button>
     98e:	0e 94 84 01 	call	0x308	; 0x308 <lcd_putc>
        uint16_t freqC  = 0;
        uint16_t freqR = 0;
        
        // assigning frequencies (in row)
        if ((button == '1') | (button == '2') | (button == '3'))
     992:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <button>
     996:	8f ec       	ldi	r24, 0xCF	; 207
     998:	89 0f       	add	r24, r25
     99a:	83 30       	cpi	r24, 0x03	; 3
     99c:	d8 f0       	brcs	.+54     	; 0x9d4 <__stack+0xd5>
            freqR = 697;
        }
        else 
        {

            if ((button == '4') | (button == '5') | (button == '6'))
     99e:	8c ec       	ldi	r24, 0xCC	; 204
     9a0:	89 0f       	add	r24, r25
     9a2:	83 30       	cpi	r24, 0x03	; 3
     9a4:	d0 f0       	brcs	.+52     	; 0x9da <__stack+0xdb>
            {
                freqR = 770;
            } 
            else
            {
                if ((button == '7') | (button == '8') | (button == '9'))
     9a6:	89 ec       	ldi	r24, 0xC9	; 201
     9a8:	89 0f       	add	r24, r25
     9aa:	83 30       	cpi	r24, 0x03	; 3
     9ac:	c8 f0       	brcs	.+50     	; 0x9e0 <__stack+0xe1>
                {
                    freqR = 852;
                } 
                else
                {
                  if ((button == '*') | (button == '0') | (button == '#'))
     9ae:	21 e0       	ldi	r18, 0x01	; 1
     9b0:	9a 32       	cpi	r25, 0x2A	; 42
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <__stack+0xb7>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 33       	cpi	r25, 0x30	; 48
     9ba:	09 f0       	breq	.+2      	; 0x9be <__stack+0xbf>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	82 2b       	or	r24, r18
     9c0:	31 f4       	brne	.+12     	; 0x9ce <__stack+0xcf>
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	93 32       	cpi	r25, 0x23	; 35
     9c6:	09 f0       	breq	.+2      	; 0x9ca <__stack+0xcb>
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	88 23       	and	r24, r24
     9cc:	61 f0       	breq	.+24     	; 0x9e6 <__stack+0xe7>
                  {
                      freqR = 941;
     9ce:	4d ea       	ldi	r20, 0xAD	; 173
     9d0:	53 e0       	ldi	r21, 0x03	; 3
     9d2:	0b c0       	rjmp	.+22     	; 0x9ea <__stack+0xeb>
        uint16_t freqR = 0;
        
        // assigning frequencies (in row)
        if ((button == '1') | (button == '2') | (button == '3'))
        {
            freqR = 697;
     9d4:	49 eb       	ldi	r20, 0xB9	; 185
     9d6:	52 e0       	ldi	r21, 0x02	; 2
     9d8:	08 c0       	rjmp	.+16     	; 0x9ea <__stack+0xeb>
        else 
        {

            if ((button == '4') | (button == '5') | (button == '6'))
            {
                freqR = 770;
     9da:	42 e0       	ldi	r20, 0x02	; 2
     9dc:	53 e0       	ldi	r21, 0x03	; 3
     9de:	05 c0       	rjmp	.+10     	; 0x9ea <__stack+0xeb>
            } 
            else
            {
                if ((button == '7') | (button == '8') | (button == '9'))
                {
                    freqR = 852;
     9e0:	44 e5       	ldi	r20, 0x54	; 84
     9e2:	53 e0       	ldi	r21, 0x03	; 3
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <__stack+0xeb>
    if (gen == 'D')
    {
        lcd_gotoxy(15, 0);
        lcd_putc(button);       // Printing selected button
        uint16_t freqC  = 0;
        uint16_t freqR = 0;
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	50 e0       	ldi	r21, 0x00	; 0
            }                  
        }
        
        
        // assigning frequencies (in columns)
        if ((button == '1') | (button == '4') | (button == '7') | (button == '*'))
     9ea:	31 e0       	ldi	r19, 0x01	; 1
     9ec:	91 33       	cpi	r25, 0x31	; 49
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	21 e0       	ldi	r18, 0x01	; 1
     9f4:	94 33       	cpi	r25, 0x34	; 52
     9f6:	09 f0       	breq	.+2      	; 0x9fa <__stack+0xfb>
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	32 2b       	or	r19, r18
     9fc:	21 e0       	ldi	r18, 0x01	; 1
     9fe:	97 33       	cpi	r25, 0x37	; 55
     a00:	09 f0       	breq	.+2      	; 0xa04 <__stack+0x105>
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	23 2b       	or	r18, r19
     a06:	61 f5       	brne	.+88     	; 0xa60 <__stack+0x161>
     a08:	21 e0       	ldi	r18, 0x01	; 1
     a0a:	9a 32       	cpi	r25, 0x2A	; 42
     a0c:	09 f0       	breq	.+2      	; 0xa10 <__stack+0x111>
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	21 11       	cpse	r18, r1
     a12:	26 c0       	rjmp	.+76     	; 0xa60 <__stack+0x161>
        {
            freqC = 1209;
        } 
        else
        {
            if ((button == '2') | (button == '5') | (button == '8') | (button == '0'))
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	95 33       	cpi	r25, 0x35	; 53
     a18:	09 f0       	breq	.+2      	; 0xa1c <__stack+0x11d>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	21 e0       	ldi	r18, 0x01	; 1
     a1e:	98 33       	cpi	r25, 0x38	; 56
     a20:	09 f0       	breq	.+2      	; 0xa24 <__stack+0x125>
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	28 2b       	or	r18, r24
     a26:	f9 f4       	brne	.+62     	; 0xa66 <__stack+0x167>
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	89 2f       	mov	r24, r25
     a2c:	8d 7f       	andi	r24, 0xFD	; 253
     a2e:	80 33       	cpi	r24, 0x30	; 48
     a30:	09 f0       	breq	.+2      	; 0xa34 <__stack+0x135>
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	21 11       	cpse	r18, r1
     a36:	17 c0       	rjmp	.+46     	; 0xa66 <__stack+0x167>
            {
                freqC = 1336;
            } 
            else
            {
                if ((button == '3') | (button == '6') | (button == '9') | (button == '#'))
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	96 33       	cpi	r25, 0x36	; 54
     a3c:	09 f0       	breq	.+2      	; 0xa40 <__stack+0x141>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	99 33       	cpi	r25, 0x39	; 57
     a44:	09 f0       	breq	.+2      	; 0xa48 <__stack+0x149>
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	82 2b       	or	r24, r18
     a4a:	39 f4       	brne	.+14     	; 0xa5a <__stack+0x15b>
     a4c:	9f 7e       	andi	r25, 0xEF	; 239
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	93 32       	cpi	r25, 0x23	; 35
     a52:	09 f0       	breq	.+2      	; 0xa56 <__stack+0x157>
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	88 23       	and	r24, r24
     a58:	49 f0       	breq	.+18     	; 0xa6c <__stack+0x16d>
                {
                    freqC = 1477;
     a5a:	c5 ec       	ldi	r28, 0xC5	; 197
     a5c:	d5 e0       	ldi	r29, 0x05	; 5
     a5e:	08 c0       	rjmp	.+16     	; 0xa70 <__stack+0x171>
        
        
        // assigning frequencies (in columns)
        if ((button == '1') | (button == '4') | (button == '7') | (button == '*'))
        {
            freqC = 1209;
     a60:	c9 eb       	ldi	r28, 0xB9	; 185
     a62:	d4 e0       	ldi	r29, 0x04	; 4
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <__stack+0x171>
        } 
        else
        {
            if ((button == '2') | (button == '5') | (button == '8') | (button == '0'))
            {
                freqC = 1336;
     a66:	c8 e3       	ldi	r28, 0x38	; 56
     a68:	d5 e0       	ldi	r29, 0x05	; 5
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <__stack+0x171>
    //function for DTMF
    if (gen == 'D')
    {
        lcd_gotoxy(15, 0);
        lcd_putc(button);       // Printing selected button
        uint16_t freqC  = 0;
     a6c:	c0 e0       	ldi	r28, 0x00	; 0
     a6e:	d0 e0       	ldi	r29, 0x00	; 0
                }
            }
        }

        //calculationg step sizes
        uint8_t step_size_R = freq_to_stepsize(freqR);
     a70:	ca 01       	movw	r24, r20
     a72:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <freq_to_stepsize>
     a76:	f8 2e       	mov	r15, r24
        uint8_t step_size_C = freq_to_stepsize(freqC);
     a78:	ce 01       	movw	r24, r28
     a7a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <freq_to_stepsize>
     a7e:	e8 2e       	mov	r14, r24
        
        
        static uint8_t positionR = 0;
        static uint8_t positionC = 0;

        bitstream = (table[positionR] + table[positionC] /2);   // calculating output value
     a80:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <__data_end>
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
     a8a:	e2 5f       	subi	r30, 0xF2	; 242
     a8c:	fe 4f       	sbci	r31, 0xFE	; 254
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	96 95       	lsr	r25
     a94:	87 95       	ror	r24
     a96:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <positionR.1997>
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	ee 0f       	add	r30, r30
     a9e:	ff 1f       	adc	r31, r31
     aa0:	e2 5f       	subi	r30, 0xF2	; 242
     aa2:	fe 4f       	sbci	r31, 0xFE	; 254
     aa4:	90 81       	ld	r25, Z
     aa6:	89 0f       	add	r24, r25
     aa8:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <bitstream.1985>
        output_bitstream(bitstream);
     aac:	0e 94 7c 00 	call	0xf8	; 0xf8 <output_bitstream>
        
        //updating positions
        if ((positionR + step_size_R) < sizeof(table))
     ab0:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <positionR.1997>
     ab4:	8f 2d       	mov	r24, r15
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	82 0f       	add	r24, r18
     aba:	91 1d       	adc	r25, r1
     abc:	8e 3f       	cpi	r24, 0xFE	; 254
     abe:	91 40       	sbci	r25, 0x01	; 1
     ac0:	20 f4       	brcc	.+8      	; 0xaca <__stack+0x1cb>
        {
            positionR += step_size_R;
     ac2:	f2 0e       	add	r15, r18
     ac4:	f0 92 53 03 	sts	0x0353, r15	; 0x800353 <positionR.1997>
     ac8:	02 c0       	rjmp	.+4      	; 0xace <__stack+0x1cf>
        }
        else
        {
            positionR = 0;
     aca:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <positionR.1997>
        }

        if ((positionC + step_size_C) < sizeof(table))
     ace:	20 91 52 03 	lds	r18, 0x0352	; 0x800352 <__data_end>
     ad2:	8e 2d       	mov	r24, r14
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	82 0f       	add	r24, r18
     ad8:	91 1d       	adc	r25, r1
     ada:	8e 3f       	cpi	r24, 0xFE	; 254
     adc:	91 40       	sbci	r25, 0x01	; 1
     ade:	20 f4       	brcc	.+8      	; 0xae8 <__stack+0x1e9>
        {
            positionC += step_size_C;
     ae0:	e2 0e       	add	r14, r18
     ae2:	e0 92 52 03 	sts	0x0352, r14	; 0x800352 <__data_end>
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <__stack+0x1ed>
        }
        else
        {
            positionC = 0;
     ae8:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <__data_end>
        uart_puts(lcd_string);
        uart_puts("\r\n");       
    }
    */   
    
}
     aec:	ff 91       	pop	r31
     aee:	ef 91       	pop	r30
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	bf 91       	pop	r27
     af6:	af 91       	pop	r26
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	7f 91       	pop	r23
     afe:	6f 91       	pop	r22
     b00:	5f 91       	pop	r21
     b02:	4f 91       	pop	r20
     b04:	3f 91       	pop	r19
     b06:	2f 91       	pop	r18
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	cf 90       	pop	r12
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	2f 93       	push	r18
     b26:	8f 93       	push	r24
     b28:	9f 93       	push	r25
     b2a:	ef 93       	push	r30
     b2c:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
     b2e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
     b32:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
     b36:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     b38:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <UART_RxHead>
     b3c:	ef 5f       	subi	r30, 0xFF	; 255
     b3e:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
     b40:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <UART_RxTail>
     b44:	e9 17       	cp	r30, r25
     b46:	39 f0       	breq	.+14     	; 0xb56 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
     b48:	e0 93 5f 03 	sts	0x035F, r30	; 0x80035f <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	ee 59       	subi	r30, 0x9E	; 158
     b50:	fc 4f       	sbci	r31, 0xFC	; 252
     b52:	20 83       	st	Z, r18
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     b56:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
     b58:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <UART_LastRxError>
     b5c:	89 2b       	or	r24, r25
     b5e:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <UART_LastRxError>
}
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	2f 91       	pop	r18
     b6c:	0f 90       	pop	r0
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	0f 90       	pop	r0
     b72:	1f 90       	pop	r1
     b74:	18 95       	reti

00000b76 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
     b76:	1f 92       	push	r1
     b78:	0f 92       	push	r0
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	0f 92       	push	r0
     b7e:	11 24       	eor	r1, r1
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	ef 93       	push	r30
     b86:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
     b88:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <UART_TxHead>
     b8c:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <UART_TxTail>
     b90:	98 17       	cp	r25, r24
     b92:	69 f0       	breq	.+26     	; 0xbae <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     b94:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <UART_TxTail>
     b98:	ef 5f       	subi	r30, 0xFF	; 255
     b9a:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
     b9c:	e0 93 60 03 	sts	0x0360, r30	; 0x800360 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	ee 57       	subi	r30, 0x7E	; 126
     ba4:	fc 4f       	sbci	r31, 0xFC	; 252
     ba6:	80 81       	ld	r24, Z
     ba8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     bae:	e1 ec       	ldi	r30, 0xC1	; 193
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8f 7d       	andi	r24, 0xDF	; 223
     bb6:	80 83       	st	Z, r24
    }
}
     bb8:	ff 91       	pop	r31
     bba:	ef 91       	pop	r30
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	0f 90       	pop	r0
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	0f 90       	pop	r0
     bc6:	1f 90       	pop	r1
     bc8:	18 95       	reti

00000bca <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
     bca:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <UART_TxHead>
    UART_TxTail = 0;
     bce:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <UART_TxTail>
    UART_RxHead = 0;
     bd2:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <UART_RxHead>
    UART_RxTail = 0;
     bd6:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
     bda:	99 23       	and	r25, r25
     bdc:	1c f4       	brge	.+6      	; 0xbe4 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
     bde:	22 e0       	ldi	r18, 0x02	; 2
     be0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
     be4:	90 78       	andi	r25, 0x80	; 128
     be6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
     bea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
     bee:	88 e9       	ldi	r24, 0x98	; 152
     bf0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
     bf4:	86 e0       	ldi	r24, 0x06	; 6
     bf6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     bfa:	08 95       	ret

00000bfc <__subsf3>:
     bfc:	50 58       	subi	r21, 0x80	; 128

00000bfe <__addsf3>:
     bfe:	bb 27       	eor	r27, r27
     c00:	aa 27       	eor	r26, r26
     c02:	0e 94 16 06 	call	0xc2c	; 0xc2c <__addsf3x>
     c06:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_round>
     c0a:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_pscA>
     c0e:	38 f0       	brcs	.+14     	; 0xc1e <__addsf3+0x20>
     c10:	0e 94 89 07 	call	0xf12	; 0xf12 <__fp_pscB>
     c14:	20 f0       	brcs	.+8      	; 0xc1e <__addsf3+0x20>
     c16:	39 f4       	brne	.+14     	; 0xc26 <__addsf3+0x28>
     c18:	9f 3f       	cpi	r25, 0xFF	; 255
     c1a:	19 f4       	brne	.+6      	; 0xc22 <__addsf3+0x24>
     c1c:	26 f4       	brtc	.+8      	; 0xc26 <__addsf3+0x28>
     c1e:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__fp_nan>
     c22:	0e f4       	brtc	.+2      	; 0xc26 <__addsf3+0x28>
     c24:	e0 95       	com	r30
     c26:	e7 fb       	bst	r30, 7
     c28:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_inf>

00000c2c <__addsf3x>:
     c2c:	e9 2f       	mov	r30, r25
     c2e:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_split3>
     c32:	58 f3       	brcs	.-42     	; 0xc0a <__addsf3+0xc>
     c34:	ba 17       	cp	r27, r26
     c36:	62 07       	cpc	r22, r18
     c38:	73 07       	cpc	r23, r19
     c3a:	84 07       	cpc	r24, r20
     c3c:	95 07       	cpc	r25, r21
     c3e:	20 f0       	brcs	.+8      	; 0xc48 <__addsf3x+0x1c>
     c40:	79 f4       	brne	.+30     	; 0xc60 <__addsf3x+0x34>
     c42:	a6 f5       	brtc	.+104    	; 0xcac <__addsf3x+0x80>
     c44:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_zero>
     c48:	0e f4       	brtc	.+2      	; 0xc4c <__addsf3x+0x20>
     c4a:	e0 95       	com	r30
     c4c:	0b 2e       	mov	r0, r27
     c4e:	ba 2f       	mov	r27, r26
     c50:	a0 2d       	mov	r26, r0
     c52:	0b 01       	movw	r0, r22
     c54:	b9 01       	movw	r22, r18
     c56:	90 01       	movw	r18, r0
     c58:	0c 01       	movw	r0, r24
     c5a:	ca 01       	movw	r24, r20
     c5c:	a0 01       	movw	r20, r0
     c5e:	11 24       	eor	r1, r1
     c60:	ff 27       	eor	r31, r31
     c62:	59 1b       	sub	r21, r25
     c64:	99 f0       	breq	.+38     	; 0xc8c <__addsf3x+0x60>
     c66:	59 3f       	cpi	r21, 0xF9	; 249
     c68:	50 f4       	brcc	.+20     	; 0xc7e <__addsf3x+0x52>
     c6a:	50 3e       	cpi	r21, 0xE0	; 224
     c6c:	68 f1       	brcs	.+90     	; 0xcc8 <__addsf3x+0x9c>
     c6e:	1a 16       	cp	r1, r26
     c70:	f0 40       	sbci	r31, 0x00	; 0
     c72:	a2 2f       	mov	r26, r18
     c74:	23 2f       	mov	r18, r19
     c76:	34 2f       	mov	r19, r20
     c78:	44 27       	eor	r20, r20
     c7a:	58 5f       	subi	r21, 0xF8	; 248
     c7c:	f3 cf       	rjmp	.-26     	; 0xc64 <__addsf3x+0x38>
     c7e:	46 95       	lsr	r20
     c80:	37 95       	ror	r19
     c82:	27 95       	ror	r18
     c84:	a7 95       	ror	r26
     c86:	f0 40       	sbci	r31, 0x00	; 0
     c88:	53 95       	inc	r21
     c8a:	c9 f7       	brne	.-14     	; 0xc7e <__addsf3x+0x52>
     c8c:	7e f4       	brtc	.+30     	; 0xcac <__addsf3x+0x80>
     c8e:	1f 16       	cp	r1, r31
     c90:	ba 0b       	sbc	r27, r26
     c92:	62 0b       	sbc	r22, r18
     c94:	73 0b       	sbc	r23, r19
     c96:	84 0b       	sbc	r24, r20
     c98:	ba f0       	brmi	.+46     	; 0xcc8 <__addsf3x+0x9c>
     c9a:	91 50       	subi	r25, 0x01	; 1
     c9c:	a1 f0       	breq	.+40     	; 0xcc6 <__addsf3x+0x9a>
     c9e:	ff 0f       	add	r31, r31
     ca0:	bb 1f       	adc	r27, r27
     ca2:	66 1f       	adc	r22, r22
     ca4:	77 1f       	adc	r23, r23
     ca6:	88 1f       	adc	r24, r24
     ca8:	c2 f7       	brpl	.-16     	; 0xc9a <__addsf3x+0x6e>
     caa:	0e c0       	rjmp	.+28     	; 0xcc8 <__addsf3x+0x9c>
     cac:	ba 0f       	add	r27, r26
     cae:	62 1f       	adc	r22, r18
     cb0:	73 1f       	adc	r23, r19
     cb2:	84 1f       	adc	r24, r20
     cb4:	48 f4       	brcc	.+18     	; 0xcc8 <__addsf3x+0x9c>
     cb6:	87 95       	ror	r24
     cb8:	77 95       	ror	r23
     cba:	67 95       	ror	r22
     cbc:	b7 95       	ror	r27
     cbe:	f7 95       	ror	r31
     cc0:	9e 3f       	cpi	r25, 0xFE	; 254
     cc2:	08 f0       	brcs	.+2      	; 0xcc6 <__addsf3x+0x9a>
     cc4:	b0 cf       	rjmp	.-160    	; 0xc26 <__addsf3+0x28>
     cc6:	93 95       	inc	r25
     cc8:	88 0f       	add	r24, r24
     cca:	08 f0       	brcs	.+2      	; 0xcce <__addsf3x+0xa2>
     ccc:	99 27       	eor	r25, r25
     cce:	ee 0f       	add	r30, r30
     cd0:	97 95       	ror	r25
     cd2:	87 95       	ror	r24
     cd4:	08 95       	ret

00000cd6 <__cmpsf2>:
     cd6:	0e 94 55 07 	call	0xeaa	; 0xeaa <__fp_cmp>
     cda:	08 f4       	brcc	.+2      	; 0xcde <__cmpsf2+0x8>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	08 95       	ret

00000ce0 <__divsf3>:
     ce0:	0e 94 84 06 	call	0xd08	; 0xd08 <__divsf3x>
     ce4:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_round>
     ce8:	0e 94 89 07 	call	0xf12	; 0xf12 <__fp_pscB>
     cec:	58 f0       	brcs	.+22     	; 0xd04 <__divsf3+0x24>
     cee:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_pscA>
     cf2:	40 f0       	brcs	.+16     	; 0xd04 <__divsf3+0x24>
     cf4:	29 f4       	brne	.+10     	; 0xd00 <__divsf3+0x20>
     cf6:	5f 3f       	cpi	r21, 0xFF	; 255
     cf8:	29 f0       	breq	.+10     	; 0xd04 <__divsf3+0x24>
     cfa:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_inf>
     cfe:	51 11       	cpse	r21, r1
     d00:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_szero>
     d04:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__fp_nan>

00000d08 <__divsf3x>:
     d08:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_split3>
     d0c:	68 f3       	brcs	.-38     	; 0xce8 <__divsf3+0x8>

00000d0e <__divsf3_pse>:
     d0e:	99 23       	and	r25, r25
     d10:	b1 f3       	breq	.-20     	; 0xcfe <__divsf3+0x1e>
     d12:	55 23       	and	r21, r21
     d14:	91 f3       	breq	.-28     	; 0xcfa <__divsf3+0x1a>
     d16:	95 1b       	sub	r25, r21
     d18:	55 0b       	sbc	r21, r21
     d1a:	bb 27       	eor	r27, r27
     d1c:	aa 27       	eor	r26, r26
     d1e:	62 17       	cp	r22, r18
     d20:	73 07       	cpc	r23, r19
     d22:	84 07       	cpc	r24, r20
     d24:	38 f0       	brcs	.+14     	; 0xd34 <__divsf3_pse+0x26>
     d26:	9f 5f       	subi	r25, 0xFF	; 255
     d28:	5f 4f       	sbci	r21, 0xFF	; 255
     d2a:	22 0f       	add	r18, r18
     d2c:	33 1f       	adc	r19, r19
     d2e:	44 1f       	adc	r20, r20
     d30:	aa 1f       	adc	r26, r26
     d32:	a9 f3       	breq	.-22     	; 0xd1e <__divsf3_pse+0x10>
     d34:	35 d0       	rcall	.+106    	; 0xda0 <__divsf3_pse+0x92>
     d36:	0e 2e       	mov	r0, r30
     d38:	3a f0       	brmi	.+14     	; 0xd48 <__divsf3_pse+0x3a>
     d3a:	e0 e8       	ldi	r30, 0x80	; 128
     d3c:	32 d0       	rcall	.+100    	; 0xda2 <__divsf3_pse+0x94>
     d3e:	91 50       	subi	r25, 0x01	; 1
     d40:	50 40       	sbci	r21, 0x00	; 0
     d42:	e6 95       	lsr	r30
     d44:	00 1c       	adc	r0, r0
     d46:	ca f7       	brpl	.-14     	; 0xd3a <__divsf3_pse+0x2c>
     d48:	2b d0       	rcall	.+86     	; 0xda0 <__divsf3_pse+0x92>
     d4a:	fe 2f       	mov	r31, r30
     d4c:	29 d0       	rcall	.+82     	; 0xda0 <__divsf3_pse+0x92>
     d4e:	66 0f       	add	r22, r22
     d50:	77 1f       	adc	r23, r23
     d52:	88 1f       	adc	r24, r24
     d54:	bb 1f       	adc	r27, r27
     d56:	26 17       	cp	r18, r22
     d58:	37 07       	cpc	r19, r23
     d5a:	48 07       	cpc	r20, r24
     d5c:	ab 07       	cpc	r26, r27
     d5e:	b0 e8       	ldi	r27, 0x80	; 128
     d60:	09 f0       	breq	.+2      	; 0xd64 <__divsf3_pse+0x56>
     d62:	bb 0b       	sbc	r27, r27
     d64:	80 2d       	mov	r24, r0
     d66:	bf 01       	movw	r22, r30
     d68:	ff 27       	eor	r31, r31
     d6a:	93 58       	subi	r25, 0x83	; 131
     d6c:	5f 4f       	sbci	r21, 0xFF	; 255
     d6e:	3a f0       	brmi	.+14     	; 0xd7e <__divsf3_pse+0x70>
     d70:	9e 3f       	cpi	r25, 0xFE	; 254
     d72:	51 05       	cpc	r21, r1
     d74:	78 f0       	brcs	.+30     	; 0xd94 <__divsf3_pse+0x86>
     d76:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_inf>
     d7a:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_szero>
     d7e:	5f 3f       	cpi	r21, 0xFF	; 255
     d80:	e4 f3       	brlt	.-8      	; 0xd7a <__divsf3_pse+0x6c>
     d82:	98 3e       	cpi	r25, 0xE8	; 232
     d84:	d4 f3       	brlt	.-12     	; 0xd7a <__divsf3_pse+0x6c>
     d86:	86 95       	lsr	r24
     d88:	77 95       	ror	r23
     d8a:	67 95       	ror	r22
     d8c:	b7 95       	ror	r27
     d8e:	f7 95       	ror	r31
     d90:	9f 5f       	subi	r25, 0xFF	; 255
     d92:	c9 f7       	brne	.-14     	; 0xd86 <__divsf3_pse+0x78>
     d94:	88 0f       	add	r24, r24
     d96:	91 1d       	adc	r25, r1
     d98:	96 95       	lsr	r25
     d9a:	87 95       	ror	r24
     d9c:	97 f9       	bld	r25, 7
     d9e:	08 95       	ret
     da0:	e1 e0       	ldi	r30, 0x01	; 1
     da2:	66 0f       	add	r22, r22
     da4:	77 1f       	adc	r23, r23
     da6:	88 1f       	adc	r24, r24
     da8:	bb 1f       	adc	r27, r27
     daa:	62 17       	cp	r22, r18
     dac:	73 07       	cpc	r23, r19
     dae:	84 07       	cpc	r24, r20
     db0:	ba 07       	cpc	r27, r26
     db2:	20 f0       	brcs	.+8      	; 0xdbc <__divsf3_pse+0xae>
     db4:	62 1b       	sub	r22, r18
     db6:	73 0b       	sbc	r23, r19
     db8:	84 0b       	sbc	r24, r20
     dba:	ba 0b       	sbc	r27, r26
     dbc:	ee 1f       	adc	r30, r30
     dbe:	88 f7       	brcc	.-30     	; 0xda2 <__divsf3_pse+0x94>
     dc0:	e0 95       	com	r30
     dc2:	08 95       	ret

00000dc4 <__fixsfsi>:
     dc4:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__fixunssfsi>
     dc8:	68 94       	set
     dca:	b1 11       	cpse	r27, r1
     dcc:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_szero>
     dd0:	08 95       	ret

00000dd2 <__fixunssfsi>:
     dd2:	0e 94 a9 07 	call	0xf52	; 0xf52 <__fp_splitA>
     dd6:	88 f0       	brcs	.+34     	; 0xdfa <__fixunssfsi+0x28>
     dd8:	9f 57       	subi	r25, 0x7F	; 127
     dda:	98 f0       	brcs	.+38     	; 0xe02 <__fixunssfsi+0x30>
     ddc:	b9 2f       	mov	r27, r25
     dde:	99 27       	eor	r25, r25
     de0:	b7 51       	subi	r27, 0x17	; 23
     de2:	b0 f0       	brcs	.+44     	; 0xe10 <__fixunssfsi+0x3e>
     de4:	e1 f0       	breq	.+56     	; 0xe1e <__fixunssfsi+0x4c>
     de6:	66 0f       	add	r22, r22
     de8:	77 1f       	adc	r23, r23
     dea:	88 1f       	adc	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	1a f0       	brmi	.+6      	; 0xdf6 <__fixunssfsi+0x24>
     df0:	ba 95       	dec	r27
     df2:	c9 f7       	brne	.-14     	; 0xde6 <__fixunssfsi+0x14>
     df4:	14 c0       	rjmp	.+40     	; 0xe1e <__fixunssfsi+0x4c>
     df6:	b1 30       	cpi	r27, 0x01	; 1
     df8:	91 f0       	breq	.+36     	; 0xe1e <__fixunssfsi+0x4c>
     dfa:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fp_zero>
     dfe:	b1 e0       	ldi	r27, 0x01	; 1
     e00:	08 95       	ret
     e02:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_zero>
     e06:	67 2f       	mov	r22, r23
     e08:	78 2f       	mov	r23, r24
     e0a:	88 27       	eor	r24, r24
     e0c:	b8 5f       	subi	r27, 0xF8	; 248
     e0e:	39 f0       	breq	.+14     	; 0xe1e <__fixunssfsi+0x4c>
     e10:	b9 3f       	cpi	r27, 0xF9	; 249
     e12:	cc f3       	brlt	.-14     	; 0xe06 <__fixunssfsi+0x34>
     e14:	86 95       	lsr	r24
     e16:	77 95       	ror	r23
     e18:	67 95       	ror	r22
     e1a:	b3 95       	inc	r27
     e1c:	d9 f7       	brne	.-10     	; 0xe14 <__fixunssfsi+0x42>
     e1e:	3e f4       	brtc	.+14     	; 0xe2e <__fixunssfsi+0x5c>
     e20:	90 95       	com	r25
     e22:	80 95       	com	r24
     e24:	70 95       	com	r23
     e26:	61 95       	neg	r22
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	8f 4f       	sbci	r24, 0xFF	; 255
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	08 95       	ret

00000e30 <__floatunsisf>:
     e30:	e8 94       	clt
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <__floatsisf+0x12>

00000e34 <__floatsisf>:
     e34:	97 fb       	bst	r25, 7
     e36:	3e f4       	brtc	.+14     	; 0xe46 <__floatsisf+0x12>
     e38:	90 95       	com	r25
     e3a:	80 95       	com	r24
     e3c:	70 95       	com	r23
     e3e:	61 95       	neg	r22
     e40:	7f 4f       	sbci	r23, 0xFF	; 255
     e42:	8f 4f       	sbci	r24, 0xFF	; 255
     e44:	9f 4f       	sbci	r25, 0xFF	; 255
     e46:	99 23       	and	r25, r25
     e48:	a9 f0       	breq	.+42     	; 0xe74 <__floatsisf+0x40>
     e4a:	f9 2f       	mov	r31, r25
     e4c:	96 e9       	ldi	r25, 0x96	; 150
     e4e:	bb 27       	eor	r27, r27
     e50:	93 95       	inc	r25
     e52:	f6 95       	lsr	r31
     e54:	87 95       	ror	r24
     e56:	77 95       	ror	r23
     e58:	67 95       	ror	r22
     e5a:	b7 95       	ror	r27
     e5c:	f1 11       	cpse	r31, r1
     e5e:	f8 cf       	rjmp	.-16     	; 0xe50 <__floatsisf+0x1c>
     e60:	fa f4       	brpl	.+62     	; 0xea0 <__floatsisf+0x6c>
     e62:	bb 0f       	add	r27, r27
     e64:	11 f4       	brne	.+4      	; 0xe6a <__floatsisf+0x36>
     e66:	60 ff       	sbrs	r22, 0
     e68:	1b c0       	rjmp	.+54     	; 0xea0 <__floatsisf+0x6c>
     e6a:	6f 5f       	subi	r22, 0xFF	; 255
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	8f 4f       	sbci	r24, 0xFF	; 255
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	16 c0       	rjmp	.+44     	; 0xea0 <__floatsisf+0x6c>
     e74:	88 23       	and	r24, r24
     e76:	11 f0       	breq	.+4      	; 0xe7c <__floatsisf+0x48>
     e78:	96 e9       	ldi	r25, 0x96	; 150
     e7a:	11 c0       	rjmp	.+34     	; 0xe9e <__floatsisf+0x6a>
     e7c:	77 23       	and	r23, r23
     e7e:	21 f0       	breq	.+8      	; 0xe88 <__floatsisf+0x54>
     e80:	9e e8       	ldi	r25, 0x8E	; 142
     e82:	87 2f       	mov	r24, r23
     e84:	76 2f       	mov	r23, r22
     e86:	05 c0       	rjmp	.+10     	; 0xe92 <__floatsisf+0x5e>
     e88:	66 23       	and	r22, r22
     e8a:	71 f0       	breq	.+28     	; 0xea8 <__floatsisf+0x74>
     e8c:	96 e8       	ldi	r25, 0x86	; 134
     e8e:	86 2f       	mov	r24, r22
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	2a f0       	brmi	.+10     	; 0xea0 <__floatsisf+0x6c>
     e96:	9a 95       	dec	r25
     e98:	66 0f       	add	r22, r22
     e9a:	77 1f       	adc	r23, r23
     e9c:	88 1f       	adc	r24, r24
     e9e:	da f7       	brpl	.-10     	; 0xe96 <__floatsisf+0x62>
     ea0:	88 0f       	add	r24, r24
     ea2:	96 95       	lsr	r25
     ea4:	87 95       	ror	r24
     ea6:	97 f9       	bld	r25, 7
     ea8:	08 95       	ret

00000eaa <__fp_cmp>:
     eaa:	99 0f       	add	r25, r25
     eac:	00 08       	sbc	r0, r0
     eae:	55 0f       	add	r21, r21
     eb0:	aa 0b       	sbc	r26, r26
     eb2:	e0 e8       	ldi	r30, 0x80	; 128
     eb4:	fe ef       	ldi	r31, 0xFE	; 254
     eb6:	16 16       	cp	r1, r22
     eb8:	17 06       	cpc	r1, r23
     eba:	e8 07       	cpc	r30, r24
     ebc:	f9 07       	cpc	r31, r25
     ebe:	c0 f0       	brcs	.+48     	; 0xef0 <__fp_cmp+0x46>
     ec0:	12 16       	cp	r1, r18
     ec2:	13 06       	cpc	r1, r19
     ec4:	e4 07       	cpc	r30, r20
     ec6:	f5 07       	cpc	r31, r21
     ec8:	98 f0       	brcs	.+38     	; 0xef0 <__fp_cmp+0x46>
     eca:	62 1b       	sub	r22, r18
     ecc:	73 0b       	sbc	r23, r19
     ece:	84 0b       	sbc	r24, r20
     ed0:	95 0b       	sbc	r25, r21
     ed2:	39 f4       	brne	.+14     	; 0xee2 <__fp_cmp+0x38>
     ed4:	0a 26       	eor	r0, r26
     ed6:	61 f0       	breq	.+24     	; 0xef0 <__fp_cmp+0x46>
     ed8:	23 2b       	or	r18, r19
     eda:	24 2b       	or	r18, r20
     edc:	25 2b       	or	r18, r21
     ede:	21 f4       	brne	.+8      	; 0xee8 <__fp_cmp+0x3e>
     ee0:	08 95       	ret
     ee2:	0a 26       	eor	r0, r26
     ee4:	09 f4       	brne	.+2      	; 0xee8 <__fp_cmp+0x3e>
     ee6:	a1 40       	sbci	r26, 0x01	; 1
     ee8:	a6 95       	lsr	r26
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	81 1d       	adc	r24, r1
     eee:	81 1d       	adc	r24, r1
     ef0:	08 95       	ret

00000ef2 <__fp_inf>:
     ef2:	97 f9       	bld	r25, 7
     ef4:	9f 67       	ori	r25, 0x7F	; 127
     ef6:	80 e8       	ldi	r24, 0x80	; 128
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	08 95       	ret

00000efe <__fp_nan>:
     efe:	9f ef       	ldi	r25, 0xFF	; 255
     f00:	80 ec       	ldi	r24, 0xC0	; 192
     f02:	08 95       	ret

00000f04 <__fp_pscA>:
     f04:	00 24       	eor	r0, r0
     f06:	0a 94       	dec	r0
     f08:	16 16       	cp	r1, r22
     f0a:	17 06       	cpc	r1, r23
     f0c:	18 06       	cpc	r1, r24
     f0e:	09 06       	cpc	r0, r25
     f10:	08 95       	ret

00000f12 <__fp_pscB>:
     f12:	00 24       	eor	r0, r0
     f14:	0a 94       	dec	r0
     f16:	12 16       	cp	r1, r18
     f18:	13 06       	cpc	r1, r19
     f1a:	14 06       	cpc	r1, r20
     f1c:	05 06       	cpc	r0, r21
     f1e:	08 95       	ret

00000f20 <__fp_round>:
     f20:	09 2e       	mov	r0, r25
     f22:	03 94       	inc	r0
     f24:	00 0c       	add	r0, r0
     f26:	11 f4       	brne	.+4      	; 0xf2c <__fp_round+0xc>
     f28:	88 23       	and	r24, r24
     f2a:	52 f0       	brmi	.+20     	; 0xf40 <__fp_round+0x20>
     f2c:	bb 0f       	add	r27, r27
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fp_round+0x20>
     f30:	bf 2b       	or	r27, r31
     f32:	11 f4       	brne	.+4      	; 0xf38 <__fp_round+0x18>
     f34:	60 ff       	sbrs	r22, 0
     f36:	04 c0       	rjmp	.+8      	; 0xf40 <__fp_round+0x20>
     f38:	6f 5f       	subi	r22, 0xFF	; 255
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	8f 4f       	sbci	r24, 0xFF	; 255
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	08 95       	ret

00000f42 <__fp_split3>:
     f42:	57 fd       	sbrc	r21, 7
     f44:	90 58       	subi	r25, 0x80	; 128
     f46:	44 0f       	add	r20, r20
     f48:	55 1f       	adc	r21, r21
     f4a:	59 f0       	breq	.+22     	; 0xf62 <__fp_splitA+0x10>
     f4c:	5f 3f       	cpi	r21, 0xFF	; 255
     f4e:	71 f0       	breq	.+28     	; 0xf6c <__fp_splitA+0x1a>
     f50:	47 95       	ror	r20

00000f52 <__fp_splitA>:
     f52:	88 0f       	add	r24, r24
     f54:	97 fb       	bst	r25, 7
     f56:	99 1f       	adc	r25, r25
     f58:	61 f0       	breq	.+24     	; 0xf72 <__fp_splitA+0x20>
     f5a:	9f 3f       	cpi	r25, 0xFF	; 255
     f5c:	79 f0       	breq	.+30     	; 0xf7c <__fp_splitA+0x2a>
     f5e:	87 95       	ror	r24
     f60:	08 95       	ret
     f62:	12 16       	cp	r1, r18
     f64:	13 06       	cpc	r1, r19
     f66:	14 06       	cpc	r1, r20
     f68:	55 1f       	adc	r21, r21
     f6a:	f2 cf       	rjmp	.-28     	; 0xf50 <__fp_split3+0xe>
     f6c:	46 95       	lsr	r20
     f6e:	f1 df       	rcall	.-30     	; 0xf52 <__fp_splitA>
     f70:	08 c0       	rjmp	.+16     	; 0xf82 <__fp_splitA+0x30>
     f72:	16 16       	cp	r1, r22
     f74:	17 06       	cpc	r1, r23
     f76:	18 06       	cpc	r1, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	f1 cf       	rjmp	.-30     	; 0xf5e <__fp_splitA+0xc>
     f7c:	86 95       	lsr	r24
     f7e:	71 05       	cpc	r23, r1
     f80:	61 05       	cpc	r22, r1
     f82:	08 94       	sec
     f84:	08 95       	ret

00000f86 <__fp_zero>:
     f86:	e8 94       	clt

00000f88 <__fp_szero>:
     f88:	bb 27       	eor	r27, r27
     f8a:	66 27       	eor	r22, r22
     f8c:	77 27       	eor	r23, r23
     f8e:	cb 01       	movw	r24, r22
     f90:	97 f9       	bld	r25, 7
     f92:	08 95       	ret

00000f94 <__mulsf3>:
     f94:	0e 94 dd 07 	call	0xfba	; 0xfba <__mulsf3x>
     f98:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_round>
     f9c:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_pscA>
     fa0:	38 f0       	brcs	.+14     	; 0xfb0 <__mulsf3+0x1c>
     fa2:	0e 94 89 07 	call	0xf12	; 0xf12 <__fp_pscB>
     fa6:	20 f0       	brcs	.+8      	; 0xfb0 <__mulsf3+0x1c>
     fa8:	95 23       	and	r25, r21
     faa:	11 f0       	breq	.+4      	; 0xfb0 <__mulsf3+0x1c>
     fac:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_inf>
     fb0:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__fp_nan>
     fb4:	11 24       	eor	r1, r1
     fb6:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_szero>

00000fba <__mulsf3x>:
     fba:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_split3>
     fbe:	70 f3       	brcs	.-36     	; 0xf9c <__mulsf3+0x8>

00000fc0 <__mulsf3_pse>:
     fc0:	95 9f       	mul	r25, r21
     fc2:	c1 f3       	breq	.-16     	; 0xfb4 <__mulsf3+0x20>
     fc4:	95 0f       	add	r25, r21
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	55 1f       	adc	r21, r21
     fca:	62 9f       	mul	r22, r18
     fcc:	f0 01       	movw	r30, r0
     fce:	72 9f       	mul	r23, r18
     fd0:	bb 27       	eor	r27, r27
     fd2:	f0 0d       	add	r31, r0
     fd4:	b1 1d       	adc	r27, r1
     fd6:	63 9f       	mul	r22, r19
     fd8:	aa 27       	eor	r26, r26
     fda:	f0 0d       	add	r31, r0
     fdc:	b1 1d       	adc	r27, r1
     fde:	aa 1f       	adc	r26, r26
     fe0:	64 9f       	mul	r22, r20
     fe2:	66 27       	eor	r22, r22
     fe4:	b0 0d       	add	r27, r0
     fe6:	a1 1d       	adc	r26, r1
     fe8:	66 1f       	adc	r22, r22
     fea:	82 9f       	mul	r24, r18
     fec:	22 27       	eor	r18, r18
     fee:	b0 0d       	add	r27, r0
     ff0:	a1 1d       	adc	r26, r1
     ff2:	62 1f       	adc	r22, r18
     ff4:	73 9f       	mul	r23, r19
     ff6:	b0 0d       	add	r27, r0
     ff8:	a1 1d       	adc	r26, r1
     ffa:	62 1f       	adc	r22, r18
     ffc:	83 9f       	mul	r24, r19
     ffe:	a0 0d       	add	r26, r0
    1000:	61 1d       	adc	r22, r1
    1002:	22 1f       	adc	r18, r18
    1004:	74 9f       	mul	r23, r20
    1006:	33 27       	eor	r19, r19
    1008:	a0 0d       	add	r26, r0
    100a:	61 1d       	adc	r22, r1
    100c:	23 1f       	adc	r18, r19
    100e:	84 9f       	mul	r24, r20
    1010:	60 0d       	add	r22, r0
    1012:	21 1d       	adc	r18, r1
    1014:	82 2f       	mov	r24, r18
    1016:	76 2f       	mov	r23, r22
    1018:	6a 2f       	mov	r22, r26
    101a:	11 24       	eor	r1, r1
    101c:	9f 57       	subi	r25, 0x7F	; 127
    101e:	50 40       	sbci	r21, 0x00	; 0
    1020:	9a f0       	brmi	.+38     	; 0x1048 <__mulsf3_pse+0x88>
    1022:	f1 f0       	breq	.+60     	; 0x1060 <__mulsf3_pse+0xa0>
    1024:	88 23       	and	r24, r24
    1026:	4a f0       	brmi	.+18     	; 0x103a <__mulsf3_pse+0x7a>
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	bb 1f       	adc	r27, r27
    102e:	66 1f       	adc	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	88 1f       	adc	r24, r24
    1034:	91 50       	subi	r25, 0x01	; 1
    1036:	50 40       	sbci	r21, 0x00	; 0
    1038:	a9 f7       	brne	.-22     	; 0x1024 <__mulsf3_pse+0x64>
    103a:	9e 3f       	cpi	r25, 0xFE	; 254
    103c:	51 05       	cpc	r21, r1
    103e:	80 f0       	brcs	.+32     	; 0x1060 <__mulsf3_pse+0xa0>
    1040:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_inf>
    1044:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_szero>
    1048:	5f 3f       	cpi	r21, 0xFF	; 255
    104a:	e4 f3       	brlt	.-8      	; 0x1044 <__mulsf3_pse+0x84>
    104c:	98 3e       	cpi	r25, 0xE8	; 232
    104e:	d4 f3       	brlt	.-12     	; 0x1044 <__mulsf3_pse+0x84>
    1050:	86 95       	lsr	r24
    1052:	77 95       	ror	r23
    1054:	67 95       	ror	r22
    1056:	b7 95       	ror	r27
    1058:	f7 95       	ror	r31
    105a:	e7 95       	ror	r30
    105c:	9f 5f       	subi	r25, 0xFF	; 255
    105e:	c1 f7       	brne	.-16     	; 0x1050 <__mulsf3_pse+0x90>
    1060:	fe 2b       	or	r31, r30
    1062:	88 0f       	add	r24, r24
    1064:	91 1d       	adc	r25, r1
    1066:	96 95       	lsr	r25
    1068:	87 95       	ror	r24
    106a:	97 f9       	bld	r25, 7
    106c:	08 95       	ret

0000106e <atoi>:
    106e:	fc 01       	movw	r30, r24
    1070:	88 27       	eor	r24, r24
    1072:	99 27       	eor	r25, r25
    1074:	e8 94       	clt
    1076:	21 91       	ld	r18, Z+
    1078:	20 32       	cpi	r18, 0x20	; 32
    107a:	e9 f3       	breq	.-6      	; 0x1076 <atoi+0x8>
    107c:	29 30       	cpi	r18, 0x09	; 9
    107e:	10 f0       	brcs	.+4      	; 0x1084 <atoi+0x16>
    1080:	2e 30       	cpi	r18, 0x0E	; 14
    1082:	c8 f3       	brcs	.-14     	; 0x1076 <atoi+0x8>
    1084:	2b 32       	cpi	r18, 0x2B	; 43
    1086:	41 f0       	breq	.+16     	; 0x1098 <atoi+0x2a>
    1088:	2d 32       	cpi	r18, 0x2D	; 45
    108a:	39 f4       	brne	.+14     	; 0x109a <atoi+0x2c>
    108c:	68 94       	set
    108e:	04 c0       	rjmp	.+8      	; 0x1098 <atoi+0x2a>
    1090:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__mulhi_const_10>
    1094:	82 0f       	add	r24, r18
    1096:	91 1d       	adc	r25, r1
    1098:	21 91       	ld	r18, Z+
    109a:	20 53       	subi	r18, 0x30	; 48
    109c:	2a 30       	cpi	r18, 0x0A	; 10
    109e:	c0 f3       	brcs	.-16     	; 0x1090 <atoi+0x22>
    10a0:	1e f4       	brtc	.+6      	; 0x10a8 <atoi+0x3a>
    10a2:	90 95       	com	r25
    10a4:	81 95       	neg	r24
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	08 95       	ret

000010aa <__itoa_ncheck>:
    10aa:	bb 27       	eor	r27, r27
    10ac:	4a 30       	cpi	r20, 0x0A	; 10
    10ae:	31 f4       	brne	.+12     	; 0x10bc <__itoa_ncheck+0x12>
    10b0:	99 23       	and	r25, r25
    10b2:	22 f4       	brpl	.+8      	; 0x10bc <__itoa_ncheck+0x12>
    10b4:	bd e2       	ldi	r27, 0x2D	; 45
    10b6:	90 95       	com	r25
    10b8:	81 95       	neg	r24
    10ba:	9f 4f       	sbci	r25, 0xFF	; 255
    10bc:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__utoa_common>

000010c0 <__mulhi_const_10>:
    10c0:	7a e0       	ldi	r23, 0x0A	; 10
    10c2:	97 9f       	mul	r25, r23
    10c4:	90 2d       	mov	r25, r0
    10c6:	87 9f       	mul	r24, r23
    10c8:	80 2d       	mov	r24, r0
    10ca:	91 0d       	add	r25, r1
    10cc:	11 24       	eor	r1, r1
    10ce:	08 95       	ret

000010d0 <__utoa_ncheck>:
    10d0:	bb 27       	eor	r27, r27

000010d2 <__utoa_common>:
    10d2:	fb 01       	movw	r30, r22
    10d4:	55 27       	eor	r21, r21
    10d6:	aa 27       	eor	r26, r26
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	aa 1f       	adc	r26, r26
    10de:	a4 17       	cp	r26, r20
    10e0:	10 f0       	brcs	.+4      	; 0x10e6 <__utoa_common+0x14>
    10e2:	a4 1b       	sub	r26, r20
    10e4:	83 95       	inc	r24
    10e6:	50 51       	subi	r21, 0x10	; 16
    10e8:	b9 f7       	brne	.-18     	; 0x10d8 <__utoa_common+0x6>
    10ea:	a0 5d       	subi	r26, 0xD0	; 208
    10ec:	aa 33       	cpi	r26, 0x3A	; 58
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <__utoa_common+0x20>
    10f0:	a9 5d       	subi	r26, 0xD9	; 217
    10f2:	a1 93       	st	Z+, r26
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	79 f7       	brne	.-34     	; 0x10d6 <__utoa_common+0x4>
    10f8:	b1 11       	cpse	r27, r1
    10fa:	b1 93       	st	Z+, r27
    10fc:	11 92       	st	Z+, r1
    10fe:	cb 01       	movw	r24, r22
    1100:	0c 94 82 08 	jmp	0x1104	; 0x1104 <strrev>

00001104 <strrev>:
    1104:	dc 01       	movw	r26, r24
    1106:	fc 01       	movw	r30, r24
    1108:	67 2f       	mov	r22, r23
    110a:	71 91       	ld	r23, Z+
    110c:	77 23       	and	r23, r23
    110e:	e1 f7       	brne	.-8      	; 0x1108 <strrev+0x4>
    1110:	32 97       	sbiw	r30, 0x02	; 2
    1112:	04 c0       	rjmp	.+8      	; 0x111c <strrev+0x18>
    1114:	7c 91       	ld	r23, X
    1116:	6d 93       	st	X+, r22
    1118:	70 83       	st	Z, r23
    111a:	62 91       	ld	r22, -Z
    111c:	ae 17       	cp	r26, r30
    111e:	bf 07       	cpc	r27, r31
    1120:	c8 f3       	brcs	.-14     	; 0x1114 <strrev+0x10>
    1122:	08 95       	ret

00001124 <_exit>:
    1124:	f8 94       	cli

00001126 <__stop_program>:
    1126:	ff cf       	rjmp	.-2      	; 0x1126 <__stop_program>
