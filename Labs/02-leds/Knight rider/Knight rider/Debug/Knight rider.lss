
Knight rider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007dd  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000687  00000000  00000000  00000a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e4  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001398  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000196  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{	
	// Setting pin PD0 to input with internal pull-up resistor
	DDRD = DDRD & ~(1<<BTN);
  80:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<BTN);
  82:	58 9a       	sbi	0x0b, 0	; 11
	
	//Setting pins (reg B) to output PB0 ~ PB4
	// 0001 1111 = 31
	DDRB = DDRB | 31; 
  84:	84 b1       	in	r24, 0x04	; 4
  86:	8f 61       	ori	r24, 0x1F	; 31
  88:	84 b9       	out	0x04, r24	; 4
	
	// Set pins LOW in Data Register (LEDs off)
	// PORTB = PORTB and 1110 0000
	// 1110 0000 = 224
	PORTB = PORTB & 224;
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	80 7e       	andi	r24, 0xE0	; 224
  8e:	85 b9       	out	0x05, r24	; 5
		_delay_ms(BLINK_DELAY);
		
		if (bit_is_clear(PIND,BTN)) // the LEDs will do the full cycle
		{
			
			PORTB = PORTB ^ (1<<0); // setting LED0 on
  90:	e1 e0       	ldi	r30, 0x01	; 1
			_delay_ms(BLINK_DELAY);
			
			for (int i = 0; i < 4; i++) //i = 0,1,2,3
			{
				PORTB = PORTB ^ ~(1<<i); // setting LED_i off
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	4f ef       	ldi	r20, 0xFF	; 255
  98:	54 e3       	ldi	r21, 0x34	; 52
  9a:	6c e0       	ldi	r22, 0x0C	; 12
  9c:	41 50       	subi	r20, 0x01	; 1
  9e:	50 40       	sbci	r21, 0x00	; 0
  a0:	60 40       	sbci	r22, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
    // Infinite loop
    while (1)
    {
		_delay_ms(BLINK_DELAY);
		
		if (bit_is_clear(PIND,BTN)) // the LEDs will do the full cycle
  a8:	48 99       	sbic	0x09, 0	; 9
  aa:	f5 cf       	rjmp	.-22     	; 0x96 <main+0x16>
		{
			
			PORTB = PORTB ^ (1<<0); // setting LED0 on
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	8e 27       	eor	r24, r30
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	94 e3       	ldi	r25, 0x34	; 52
  b6:	4c e0       	ldi	r20, 0x0C	; 12
  b8:	81 50       	subi	r24, 0x01	; 1
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	40 40       	sbci	r20, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x38>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x42>
  c2:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			
			for (int i = 0; i < 4; i++) //i = 0,1,2,3
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
			{
				PORTB = PORTB ^ ~(1<<i); // setting LED_i off
  c8:	55 b1       	in	r21, 0x05	; 5
  ca:	b9 01       	movw	r22, r18
  cc:	08 2e       	mov	r0, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <main+0x54>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <main+0x50>
  d8:	46 2f       	mov	r20, r22
  da:	40 95       	com	r20
  dc:	45 27       	eor	r20, r21
  de:	45 b9       	out	0x05, r20	; 5
				PORTB = PORTB ^ ~(1<<(i+1)); // setting LED_(i+1) on
  e0:	55 b1       	in	r21, 0x05	; 5
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	b9 01       	movw	r22, r18
  e6:	08 2e       	mov	r0, r24
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x6e>
  ea:	66 0f       	add	r22, r22
  ec:	77 1f       	adc	r23, r23
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <main+0x6a>
  f2:	46 2f       	mov	r20, r22
  f4:	40 95       	com	r20
  f6:	45 27       	eor	r20, r21
  f8:	45 b9       	out	0x05, r20	; 5
  fa:	5f ef       	ldi	r21, 0xFF	; 255
  fc:	64 e3       	ldi	r22, 0x34	; 52
  fe:	4c e0       	ldi	r20, 0x0C	; 12
 100:	51 50       	subi	r21, 0x01	; 1
 102:	60 40       	sbci	r22, 0x00	; 0
 104:	40 40       	sbci	r20, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x80>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x8a>
 10a:	00 00       	nop
		{
			
			PORTB = PORTB ^ (1<<0); // setting LED0 on
			_delay_ms(BLINK_DELAY);
			
			for (int i = 0; i < 4; i++) //i = 0,1,2,3
 10c:	84 30       	cpi	r24, 0x04	; 4
 10e:	91 05       	cpc	r25, r1
 110:	d9 f6       	brne	.-74     	; 0xc8 <main+0x48>
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	90 e0       	ldi	r25, 0x00	; 0
				_delay_ms(BLINK_DELAY);
			}
			
			for (int i = 4; i > 0; i--)	// i = 4,3,2,1
			{
				PORTB = PORTB ^ ~(1<<i); // setting LED_i off
 116:	55 b1       	in	r21, 0x05	; 5
 118:	b9 01       	movw	r22, r18
 11a:	08 2e       	mov	r0, r24
 11c:	02 c0       	rjmp	.+4      	; 0x122 <main+0xa2>
 11e:	66 0f       	add	r22, r22
 120:	77 1f       	adc	r23, r23
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <main+0x9e>
 126:	46 2f       	mov	r20, r22
 128:	40 95       	com	r20
 12a:	45 27       	eor	r20, r21
 12c:	45 b9       	out	0x05, r20	; 5
				PORTB = PORTB ^ ~(1<<(i-1)); // setting LED_(i-1) on
 12e:	55 b1       	in	r21, 0x05	; 5
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	b9 01       	movw	r22, r18
 134:	08 2e       	mov	r0, r24
 136:	02 c0       	rjmp	.+4      	; 0x13c <main+0xbc>
 138:	66 0f       	add	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <main+0xb8>
 140:	46 2f       	mov	r20, r22
 142:	40 95       	com	r20
 144:	45 27       	eor	r20, r21
 146:	45 b9       	out	0x05, r20	; 5
 148:	5f ef       	ldi	r21, 0xFF	; 255
 14a:	64 e3       	ldi	r22, 0x34	; 52
 14c:	4c e0       	ldi	r20, 0x0C	; 12
 14e:	51 50       	subi	r21, 0x01	; 1
 150:	60 40       	sbci	r22, 0x00	; 0
 152:	40 40       	sbci	r20, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0xce>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xd8>
 158:	00 00       	nop
				PORTB = PORTB ^ ~(1<<i); // setting LED_i off
				PORTB = PORTB ^ ~(1<<(i+1)); // setting LED_(i+1) on
				_delay_ms(BLINK_DELAY);
			}
			
			for (int i = 4; i > 0; i--)	// i = 4,3,2,1
 15a:	00 97       	sbiw	r24, 0x00	; 0
 15c:	e1 f6       	brne	.-72     	; 0x116 <main+0x96>
				PORTB = PORTB ^ ~(1<<i); // setting LED_i off
				PORTB = PORTB ^ ~(1<<(i-1)); // setting LED_(i-1) on
				_delay_ms(BLINK_DELAY);
			}
			
			PORTB = PORTB ^ (1<<0); // setting LED0 off
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	8e 27       	eor	r24, r30
 162:	85 b9       	out	0x05, r24	; 5
 164:	98 cf       	rjmp	.-208    	; 0x96 <main+0x16>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
